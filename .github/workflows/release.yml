name: Release

on:
  workflow_dispatch:
    inputs:
      milestone_number:
        description: 'Milestone number to release'
        required: true
        default: '1'
      draft:
        description: 'Create a draft release'
        type: boolean
        default: false

permissions:
  contents: write  # For creating releases and merging branches
  packages: write  # For pushing to GHCR
  issues: read     # For reading milestone and issue data
  pull-requests: read  # For gathering PR information for release notes

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from milestone
        id: get-version
        run: |
          VERSION=$(gh api repos/:owner/:repo/milestones/${{ github.event.inputs.milestone_number }} --jq '.title')
          echo "Version from milestone: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate release notes
        id: generate-notes
        run: |
          # Get the last release tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            echo "No previous tag found, generating notes from all merged PRs"
            # Get all merged PRs
            NOTES=$(gh pr list --state merged --base main --json number,title,mergedAt,author --jq '.[] | "- #\(.number): \(.title) (@\(.author.login))"' | sort)
          else
            echo "Generating notes since $LAST_TAG"
            # Get PRs merged since last tag
            SINCE=$(git log -1 --format=%ai $LAST_TAG)
            NOTES=$(gh pr list --state merged --base main --json number,title,mergedAt,author --jq '.[] | select(.mergedAt > "'"$SINCE"'") | "- #\(.number): \(.title) (@\(.author.login))"' | sort)
          fi
          
          # Also get issues from this milestone
          MILESTONE_ISSUES=$(gh issue list --milestone ${{ github.event.inputs.milestone_number }} --state closed --json number,title,author --jq '.[] | "- #\(.number): \(.title) (@\(.author.login))"' | sort)
          
          # Combine PRs and issues, remove duplicates
          ALL_NOTES=$(echo -e "$NOTES\n$MILESTONE_ISSUES" | sort | uniq)
          
          # Format as markdown
          RELEASE_NOTES="## What's New in v${{ steps.get-version.outputs.version }}\n\n$ALL_NOTES"
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Merge dev to main
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git checkout main
          git merge --no-ff origin/dev -m "Merge dev into main for release v${{ steps.get-version.outputs.version }}"
          git push origin main

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get-version.outputs.version }}
          name: Release v${{ steps.get-version.outputs.version }}
          body: ${{ steps.generate-notes.outputs.release_notes }}
          draft: ${{ github.event.inputs.draft }}
          prerelease: false

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/vmpilot:v${{ steps.get-version.outputs.version }}
            ghcr.io/${{ github.repository_owner }}/vmpilot:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Update milestone
        if: ${{ !github.event.inputs.draft }}
        run: |
          gh api repos/:owner/:repo/milestones/${{ github.event.inputs.milestone_number }} -X PATCH -F state=closed
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}