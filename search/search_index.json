{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to VMPilot","text":"<ul> <li>Welcome to VMPilot<ul> <li>Key Features</li> <li>Quick Start Guide</li> <li>Core Documentation<ul> <li>Essential Guides</li> <li>Tools and Extensions</li> </ul> </li> </ul> </li> </ul> <p>VMPilot is a chat-based AI development agent that operates directly in your virtual machine environment. It combines natural language understanding with the ability to perform complex development tasks - reading and modifying code, managing GitHub issues, and executing system commands. Powered by OpenWebUI's rich chat interface, it provides an intuitive way to interact with your development environment through workspaces, advanced chat features, and support for multiple AI models.</p>"},{"location":"#key-features","title":"Key Features","text":"<p>\ud83d\udd39 Full System Access</p> <ul> <li>Operates directly within your virtual machine environment</li> <li>Executes and chains system commands intelligently</li> <li>Manages files, services, and system operations</li> <li>Understands your entire development environment</li> </ul> <p>\ud83d\udd39 End-to-End Development Support</p> <ul> <li>Works directly in your development environment</li> <li>Writes and modifies code based on your requirements</li> <li>Reads and analyzes test outputs to guide fixes</li> <li>Integrates with GitHub for issue management</li> <li>Understands project context and maintains consistency</li> <li>Supports multi-branch development with workspace isolation</li> </ul> <p>\ud83d\udd39 Extensible Plugin Architecture</p> <ul> <li>Built-in GitHub integration for issues and code management</li> <li>Plugin system ready for custom workflow extensions</li> <li>Future plugins planned for documentation and testing</li> </ul> <p>\ud83d\udd39 Multiple Interfaces &amp; OpenWebUI Integration</p> <ul> <li>Powerful CLI for terminal-based workflows</li> <li>Bundled Open WebUI for a seamless installation experience</li> <li>Rich web interface with advanced features:</li> <li>Multi-modal conversation view with code highlighting</li> <li>Real-time streaming responses</li> <li>Conversation history and context management</li> <li>Workspace organization and customization</li> <li>Support for multiple LLM providers</li> <li>Supports continuous CLI chat sessions with the <code>-c</code> flag when data is stored in SQLite</li> </ul>"},{"location":"#quick-start-guide","title":"Quick Start Guide","text":"<p>Get up and running with VMPilot in minutes:</p> <ol> <li>Installation - Set up VMPilot on your system</li> <li>Getting Started - Learn the basics of VMPilot</li> <li>Using Open WebUI - Learn how to use the web interface effectively</li> <li>Configuration - Configure your environment</li> </ol>"},{"location":"#core-documentation","title":"Core Documentation","text":""},{"location":"#essential-guides","title":"Essential Guides","text":"<ul> <li>Prompting Guide - Master effective prompt writing for VMPilot</li> <li>CLI Reference - Complete command-line interface documentation</li> </ul>"},{"location":"#tools-and-extensions","title":"Tools and Extensions","text":"<ul> <li>Plugins - Extend VMPilot's capabilities with plugins</li> <li>GitHub Issues - Streamline GitHub issue management</li> <li>DNS and SSL Setup - Secure your VMPilot deployment</li> </ul>"},{"location":"cli/","title":"Command Line Interface (CLI)","text":"<p>VMPilot provides a powerful command-line interface that allows you to interact with the tool directly from your terminal.</p>"},{"location":"cli/#basic-usage","title":"Basic Usage","text":"<p>The basic syntax for using the CLI is:</p> Bash<pre><code>cli.sh \"your command here\"\n</code></pre> <p>For example: Bash<pre><code>cli.sh \"Show me the contents of /etc/hosts\"\ncli.sh \"Create a new Python script that prints Hello World\"\ncli.sh  `cat request.sh`\n</code></pre></p> <p>Remember to enclose your command in quotes to ensure that it is passed as a single argument to the CLI. In the last example, we used backticks to execute a command and pass its output as an argument to the CLI.</p>"},{"location":"cli/#command-line-options","title":"Command Line Options","text":"<p>The CLI supports several command line options to customize its behavior:</p> Text Only<pre><code>usage: cli.py [-h] [-t TEMPERATURE] [-f FILE] [-p {anthropic,openai}] [-d] [-c [CHAT]] [command]\n\npositional arguments:\n  command               Command to execute (not required if using -f/--file)\n\noptions:\n  -h, --help           Show this help message and exit\n  -t TEMPERATURE,      Temperature for response generation (default: 0.8)\n  --temperature\n  -f FILE, --file FILE Input file with commands (one per line)\n  -p {anthropic,openai},\n  --provider          API provider to use (default: anthropic)\n  -d, --debug         Enable debug mode\n  -c [CHAT], --chat [CHAT]\n                      Enable chat mode to maintain conversation context. Optional: provide a specific chat ID.\n</code></pre>"},{"location":"cli/#temperature","title":"Temperature","text":"<p>The temperature parameter controls the randomness in the response generation. Higher values (e.g., 0.8) make the output more creative but potentially less focused, while lower values (e.g., 0.2) make it more deterministic and focused. As a rule you should not provide a temperature value, since these are set by the API provider. For testing we use a value of 0 so that the output is deterministic.</p> <p>Example: Bash<pre><code>cli.sh -t 0.3 \"Write a Python function to calculate factorial\"\n</code></pre></p>"},{"location":"cli/#chat-mode","title":"Chat Mode","text":"<p>Chat mode maintains conversation context across multiple commands, allowing for follow-up questions and references to previous interactions. With database persistence enabled, conversation context is preserved even between separate CLI invocations.</p> <p>Examples: Bash<pre><code># Start a chat session\ncli.sh \"List all Python files\"\n\n# Continue the same chat session (works across different terminal sessions). Where 12345 is the chat ID that shows in the output of the first command\ncli.sh -c 12345 \"Explain what these files do\"\n\n# Specify a custom chat ID\ncli.sh -c my_session_123 \"Show system information\"\n\n# Continue the custom chat session later\ncli.sh -c my_session_123 \"Show memory usage\"\n</code></pre></p> <p>Note: Chat persistence across CLI invocations requires database persistence to be enabled. See the Database Configuration section for details on how to enable this feature.</p>"},{"location":"cli/#file-input-mode","title":"File Input Mode","text":"<p>The file input mode allows you to provide a file containing multiple commands, with each command on a separate line. VMPilot will: 1. It creates a unique chat ID for the session, unless you specify one 2. Processes each line in the file as a separate command while maintaining conversation context 3. This simulates a continuous conversation as if you were interacting with VMPilot in chat mode It's similar to chat mode, but with commands read from a file, making it easier to process multiple tasks in sequence.</p> <p>Example: Bash<pre><code>cli.sh -f commands.txt\n</code></pre></p> <p>Where <code>commands.txt</code> might contain: Text Only<pre><code>List all files in the current directory\nShow me the content of the largest file\nExplain what it does\n</code></pre></p>"},{"location":"cli/#provider-selection","title":"Provider Selection","text":"<p>You can choose between different LLM providers: - anthropic (default) - openai</p> <p>Example: Bash<pre><code>cli.sh -p openai \"Explain how to use the ls command\"\n</code></pre></p>"},{"location":"cli/#debug-mode","title":"Debug Mode","text":"<p>Enable debug mode to see detailed logging information, which can be helpful for troubleshooting:</p> Bash<pre><code>cli.sh -d \"Show system information\"\n</code></pre>"},{"location":"cli/#examples","title":"Examples","text":"<p>Here are some common usage examples:</p> <ol> <li> <p>Basic system operations: Bash<pre><code>cli.sh \"Show me all Python files in the current directory\"\ncli.sh \"Create a new directory called 'test' and add a README file\"\n</code></pre></p> </li> <li> <p>File editing: Bash<pre><code>cli.sh \"Change the word 'error' to 'warning' in log.txt\"\ncli.sh \"Add a new function to myscript.py\"\n</code></pre></p> </li> <li> <p>Using different providers with custom temperature: Bash<pre><code>cli.sh -p openai -t 0.5 \"Optimize this Python script for performance\"\n</code></pre></p> </li> <li> <p>Chat sessions for complex tasks: Bash<pre><code># First command in a chat session\ncli.sh -c \"Find all log files with errors\"\n\n# Follow-up in the same session\ncli.sh -c \"Summarize the most common errors\"\n\n# Another follow-up\ncli.sh -c \"Create a script to fix these errors\"\n</code></pre></p> </li> <li> <p>Batch processing with file input: Bash<pre><code># Create a file with multiple commands\necho \"List all services running\" &gt; tasks.txt\necho \"Show disk usage\" &gt;&gt; tasks.txt\necho \"Find large log files\" &gt;&gt; tasks.txt\n\n# Process all commands in sequence with context\ncli.sh -f tasks.txt -c\n</code></pre></p> </li> </ol>"},{"location":"cli/#error-handling","title":"Error Handling","text":"<p>The CLI will display error messages when: - The command execution fails - There are permission issues - The LLM provider is not properly configured - Invalid arguments are provided</p> <p>If you encounter errors, try: 1. Using debug mode (-d) to get more information 2. Checking your API provider configuration 3. Verifying you have the necessary permissions for the requested operation 4. For file input mode, ensure each command is on a separate line</p>"},{"location":"coding/","title":"Coding Standards and Practices","text":"<p>This guide outlines the coding standards and practices recommended for VMPilot project, including code quality tools, style guidelines, and development workflows. Notice that these are python oriented, but can be adapted to other languages.</p>"},{"location":"coding/#code-quality-tools","title":"Code Quality Tools","text":"<p>VMPilot uses several tools to maintain code quality and consistency across the codebase.</p>"},{"location":"coding/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>Pre-commit hooks are scripts that run automatically before each commit is finalized. They help catch issues early and ensure consistent code quality.</p>"},{"location":"coding/#benefits-of-pre-commit-hooks","title":"Benefits of Pre-commit Hooks","text":"<ul> <li>Catch formatting and style issues before they enter the codebase</li> <li>Ensure consistent code style across contributions</li> <li>Reduce code review time by addressing common issues automatically</li> <li>Prevent commits that would fail CI checks</li> </ul>"},{"location":"coding/#setting-up-pre-commit-hooks","title":"Setting Up Pre-commit Hooks","text":"<p>After cloning the repository, set up the pre-commit hooks by running:</p> Bash<pre><code>./sh/setup_hooks.sh\n</code></pre> <p>This script will: 1. Create the pre-commit hook in your local repository 2. Make the hook executable 3. Configure it to run our linting tools</p>"},{"location":"coding/#what-the-pre-commit-hook-does","title":"What the Pre-commit Hook Does","text":"<p>When you run <code>git commit</code>, the pre-commit hook automatically:</p> <ol> <li>Runs black to check Python code formatting</li> <li>Runs isort to check import sorting</li> <li>Displays the output of these tools in your terminal</li> <li>Aborts the commit if any issues are found</li> </ol> <p>Example output from a successful pre-commit hook run:</p> Text Only<pre><code>Pre-commit hook is running!\nRunning linting checks...\nRunning black check...\nAll done! \u2728 \ud83c\udf70 \u2728\n46 files left unchanged.\nRunning isort check...\nSkipped 1 files\n\u2705 All linting checks passed!\n</code></pre>"},{"location":"coding/#running-linting-manually","title":"Running Linting Manually","text":"<p>You can also run the linting checks manually without committing:</p> Bash<pre><code>./sh/lint.sh\n</code></pre> <p>This is useful for checking your code during development or before initiating a commit.</p>"},{"location":"coding/#code-formatting-tools","title":"Code Formatting Tools","text":""},{"location":"coding/#black","title":"Black","text":"<p>Black is an uncompromising Python code formatter that reformats entire files to conform to a consistent style.</p> <ul> <li>Line length: 88 characters</li> <li>String quotes: Double quotes for multi-line strings, consistent quotes elsewhere</li> <li>No manual formatting needed - Black handles it all</li> </ul>"},{"location":"coding/#isort","title":"isort","text":"<p>isort sorts imports alphabetically and automatically separates them into sections: - Standard library imports - Third-party imports - Local application imports</p>"},{"location":"coding/#troubleshooting-pre-commit-hooks","title":"Troubleshooting Pre-commit Hooks","text":"<p>If you encounter issues with the pre-commit hooks:</p> <ol> <li> <p>Hook not running: Make sure the hook is executable:    Bash<pre><code>chmod +x .git/hooks/pre-commit\n</code></pre></p> </li> <li> <p>Path issues: If the hook can't find the lint.sh script, run the setup script again:    Bash<pre><code>./sh/setup_hooks.sh\n</code></pre></p> </li> <li> <p>Bypassing hooks (use sparingly): If you need to commit without running the hooks:    Bash<pre><code>git commit --no-verify -m \"Your message\"\n</code></pre>    Note: This should only be used in exceptional circumstances.</p> </li> <li> <p>Fixing lint errors: If the hook finds issues, fix them before committing again. You can often fix formatting issues automatically:    Bash<pre><code>black .\nisort .\n</code></pre></p> </li> </ol>"},{"location":"configuration/","title":"VMPilot Configuration Guide","text":""},{"location":"configuration/#overview","title":"Overview","text":"<p>VMPilot features a flexible configuration system that allows you to customize your environment, LLM providers, and model parameters. This guide explains all available configuration options and how to set them up.</p> <p>VMPilot also supports project-specific configuration through the <code>.vmpilot</code> directory structure. See the Project Plugin documentation for details on how to set up and customize project-specific settings.</p>"},{"location":"configuration/#applying-configuration-changes","title":"Applying Configuration Changes","text":"<p>After modifying the <code>config.ini</code> file, you must restart the VMPilot server for the changes to take effect.</p>"},{"location":"configuration/#docker-install-configuration-file-location","title":"Docker Install: Configuration File Location","text":"<p>For Docker installations, assuming you are using the default volume setup, the configuration file is located at <code>/var/lib/docker/volumes/vmpilot_config/_data/config.ini</code></p> <p>To apply changes, restart the VMPilot container: Bash<pre><code>docker exec vmpilot supervisorctl restart vmpilot\n</code></pre></p>"},{"location":"configuration/#manual-install-configuration-file-priority","title":"Manual Install: Configuration File Priority","text":"<p>VMPilot searches for configuration files in the following order:</p> <ol> <li>Custom path specified in <code>VMPILOT_CONFIG</code> environment variable</li> <li><code>./config.ini</code> in the project directory</li> <li><code>config.ini</code> in the current working directory</li> <li><code>~/.config/vmpilot/config.ini</code></li> </ol> <p>The first configuration file found will be used.</p> <p>To apply changes, restart the VMPilot server: Bash<pre><code>$MVPILOT_HOME/bin/run.sh\n</code></pre></p>"},{"location":"configuration/#configuration-sections","title":"Configuration Sections","text":"<p>The <code>config.ini</code> file is organized into the following sections:</p>"},{"location":"configuration/#general-settings-general","title":"General Settings [general]","text":"Setting Description Default default_provider Primary LLM provider (anthropic/openai) anthropic default_project Default project directory for git operations and file access ~/vmpilot tool_output_lines Number of lines shown in tool output 15 pricing_display Controls how pricing information is displayed (disabled, total_only, or detailed) detailed <p>Note: The <code>default_project</code> setting is used when no workspace-specific project is defined. For multi-branch development, you can override this by setting <code>$PROJECT_ROOT=/path/to/project</code> in each workspace's system prompt. When a project directory is set, VMPilot will check for the <code>.vmpilot/prompts/project.md</code> file and include it in the system prompt. See Multi-Branch Development and Project Plugin for details.</p>"},{"location":"configuration/#pricing-settings-pricing","title":"Pricing Settings [pricing]","text":"Setting Description Default claude_input_price Claude 3.7 Sonnet input cost per million tokens (MTok) 3.00 claude_output_price Claude 3.7 Sonnet output cost per million tokens (MTok) 15.00 claude_cache_creation_price Claude 3.7 Sonnet cache creation cost per million tokens (MTok) 3.75 claude_cache_read_price Claude 3.7 Sonnet cache read cost per million tokens (MTok) 0.30 <p>Note: The pricing values should be updated if Claude's pricing model changes. These values reflect the pricing as of March 2025.</p>"},{"location":"configuration/#model-settings-model","title":"Model Settings [model]","text":"Setting Description Default recursion_limit Maximum recursive steps allowed 25"},{"location":"configuration/#inference-settings-inference","title":"Inference Settings [inference]","text":"Setting Description Default temperature Model creativity (0.0-1.0) 0.7 max_tokens Maximum response length 2000"},{"location":"configuration/#provider-settings-anthropic-openai","title":"Provider Settings [anthropic] / [openai]","text":"Setting Description Example default_model Default model name claude-3.5 Sonnet api_key_path Path to API key file ~/.anthropic_key api_key_env API key environment variable ANTHROPIC_API_KEY beta_flags Optional beta features (key:value pairs) feature1:on,feature2:off"},{"location":"configuration/#git-settings-git","title":"Git Settings [git]","text":"Setting Description Default enabled Enable or disable Git tracking true dirty_repo_action Action when repository has uncommitted changes (stop, stash) stash auto_commit Automatically commit changes after each exchange true commit_message_style Style of generated commit messages (short, detailed, bullet_points) bullet_points model Model used for commit message generation claude-3-7-sonnet-latest provider Provider for commit message generation (anthropic, openai) anthropic temperature Temperature for commit message generation (0.0-1.0) 0.7 commit_prefix Prefix added to all commit messages [VMPilot] author Author name and email for Git commits VMPilot vmpilot@example.com"},{"location":"configuration/#database-settings","title":"Database Settings","text":"Setting Description Default enabled Enable or disable database persistence for conversations false path Path to SQLite database file /app/data/vmpilot.db"},{"location":"configuration/#example-configuration","title":"Example Configuration","text":"INI<pre><code>[general]\ndefault_provider = anthropic\ntool_output_lines = 15\npricing_display = detailed\n\n[pricing]\n# Pricing information for Claude 3.7 Sonnet (per million tokens - MTok)\nclaude_input_price = 3.00\nclaude_output_price = 15.00\nclaude_cache_creation_price = 3.75\nclaude_cache_read_price = 0.30\n\n[model]\nrecursion_limit = 25\n\n[inference]\ntemperature = 0.7\nmax_tokens = 2000\n\n[anthropic]\ndefault_model = claude-3-7-sonnet-latest\napi_key_path = ~/.anthropic/api_key\napi_key_env = ANTHROPIC_API_KEY\nbeta_flags = computer-use-2024-10-22:true\n\n[openai]\ndefault_model = o3-mini\napi_key_path = ~/.openai\napi_key_env = OPENAI_API_KEY\n\n[git]\nenabled = true\ndirty_repo_action = stash\nauto_commit = true\ncommit_message_style = bullet_points\nmodel = claude-3-7-sonnet-latest\nprovider = anthropic\ntemperature = 0.7\ncommit_prefix = [VMPilot]\nauthor = VMPilot &lt;vmpilot@example.com&gt;\n\n[database]\nenabled = true\npath = /app/data/vmpilot.db\n</code></pre>"},{"location":"configuration/#database-settings-database","title":"Database Settings [database]","text":"Setting Description Default enabled Enable or disable database persistence for conversations false path Path to SQLite database file /app/data/vmpilot.db <p>Note: When database persistence is enabled, VMPilot stores all conversations in a SQLite database, allowing chat history to persist across server restarts. This is particularly useful for maintaining context in long-running development sessions and supporting the CLI's chat mode with the <code>-c</code> flag across multiple invocations. For Docker installations, the database is stored in the <code>vmpilot_data</code> volume by default.</p>"},{"location":"configuration/#environment-variables","title":"Environment Variables","text":"<ul> <li>VMPILOT_CONFIG: Optional path to configuration file</li> <li>Provider-specific API key variables (as specified in config.ini)</li> </ul>"},{"location":"cost-tracking/","title":"Cost Tracking in VMPilot","text":"<p>\u26a0\ufe0f Pricing Warning:</p> <p>VMPilot provides estimated cost calculations for LLM usage, but these are only approximations! LLM prices change frequently, and actual provider billing may differ. For authoritative, up-to-date information, always check your language model provider\u2019s pricing page before making cost-sensitive decisions.</p>"},{"location":"cost-tracking/#overview","title":"Overview","text":"<p>VMPilot tracks and displays the estimated cost of each AI exchange as well as the accumulated cost for your current chat session. This helps users understand and monitor their AI usage expenses.</p> <ul> <li>Per-exchange cost: Shows the estimated cost for each individual interaction with the LLM.</li> <li>Accumulated cost: Shows the total estimated cost for all exchanges in the current chat.</li> <li>Database storage: All cost data is stored in the exchanges table for auditing and later review.</li> </ul>"},{"location":"cost-tracking/#how-cost-is-tracked","title":"How Cost is Tracked","text":"<p>The cost information is presented in the UI as follows:</p> Request Total Input Output Cache Read Current $0.006430 $0.003743 $0.002460 $0.000228 All $0.013964 $0.011007 $0.002730 $0.000228 <ul> <li>Costs are calculated based on the provider\u2019s published rates for tokens consumed (input and output).</li> <li>The cost is broken down into:</li> <li>Input: Tokens sent to the model.</li> <li>Output: Tokens generated by the model.</li> <li>Cache Read: Tokens read from the cache (if applicable).</li> <li>Cache Write: Tokens written to the cache (if applicable).</li> <li>Both individual and accumulated costs are shown (depending on configuration).</li> <li>Cost tracking is enabled by default but can be adjusted in configuration.</li> </ul>"},{"location":"cost-tracking/#configuration-display-options","title":"Configuration &amp; Display Options","text":"<p>You can control how cost information is displayed:</p> <ul> <li>Disabled: No costs shown.</li> <li>Total Only: Only the accumulated total is shown.</li> <li>Detailed: Both per-exchange and accumulated costs are displayed.</li> </ul> <p>Refer to the configuration documentation for details on enabling/disabling and changing detail level.</p>"},{"location":"cost-tracking/#accuracy-limitations","title":"Accuracy &amp; Limitations","text":"<ul> <li>Estimates only: VMPilot\u2019s calculations are best-effort and may not reflect your actual bill.</li> <li>Provider changes: Model prices often change, and new models may not be immediately reflected.</li> <li>Special features: Some advanced model options (e.g., fine-tuning, special endpoints) may incur extra costs not covered here.</li> <li>Currency/exchange rates: All estimates use the provider\u2019s published USD rates; your local currency or payment method may affect final charges.</li> </ul>"},{"location":"cost-tracking/#check-your-providers-pricing","title":"Check Your Provider\u2019s Pricing","text":"<ul> <li>OpenAI Pricing</li> <li>Anthropic Pricing</li> <li>Google Gemini Pricing</li> </ul> <p>For authoritative cost information, visit your provider\u2019s dashboard or usage page regularly.</p>"},{"location":"cost-tracking/#troubleshooting-faqs","title":"Troubleshooting &amp; FAQs","text":"<ul> <li>\u201cThe cost seems off!\u201d \u2014 First, check your provider\u2019s dashboard for actual usage. Ensure your models and pricing tiers match those reflected in VMPilot\u2019s calculations.</li> <li>\u201cWhy is there a difference between VMPilot and my bill?\u201d \u2014 Provider billing may include surcharges, taxes, or special fees not visible to VMPilot.</li> <li>\u201cHow do I turn off cost tracking?\u201d \u2014 Adjust the configuration as described above.</li> </ul>"},{"location":"dns_ssl_setup/","title":"DNS and SSL Configuration Guide","text":""},{"location":"dns_ssl_setup/#overview","title":"Overview","text":"<p>This guide covers setting up secure access to your OpenWebUI and VMPilot Pipeline services using DNS and SSL certificates. We'll walk through setting up dynamic DNS and configuring Caddy as a reverse proxy with automatic SSL certificate management. This is optional and not only recommended for secure access to your services, it'll make your life easier to not have to deal with browser warnings about insecure connections.</p> <p>[!CAUTION] While I tried to make this guide somewhat comprehensive, check with Claude or GPT for any additional steps or configurations that might be needed for your specific setup. At the end of the day, you're responsible for your own security.</p>"},{"location":"dns_ssl_setup/#dynamic-dns-setup","title":"Dynamic DNS Setup","text":"<p>If you're running these services from a location without a static IP which is often the case with home servers, you'll need to set up dynamic DNS to ensure your domain/subdomain always points to the correct IP address.</p> <ol> <li>Choose a Dynamic DNS Provider</li> <li> <p>Options include No-IP, DuckDNS, or Cloudflare</p> </li> <li> <p>Register for Dynamic DNS</p> </li> <li>Create an account at your chosen provider</li> <li>Register your desired subdomain</li> <li> <p>Note down your token/credentials</p> </li> <li> <p>Configure Dynamic DNS Client</p> </li> <li> <p>follow the instructions for your chosen provider</p> </li> <li> <p>Start and Enable the Service</p> </li> </ol>"},{"location":"dns_ssl_setup/#caddy-server-setup","title":"Caddy Server Setup","text":"<p>Caddy is a lightweight web server that can handle automatic SSL certificate management and reverse proxying. We'll use Caddy to set up secure access to OpenWebUI and VMPilot Pipeline.</p> <ol> <li> <p>Install Caddy    Bash<pre><code>sudo apt install -y debian-keyring debian-archive-keyring apt-transport-https\ncurl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | sudo gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg\ncurl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | sudo tee /etc/apt/sources.list.d/caddy-stable.list\nsudo apt update\nsudo apt install caddy\n</code></pre></p> </li> <li> <p>Configure Caddy    Create a Caddyfile:    Bash<pre><code>sudo nano /etc/caddy/Caddyfile\n</code></pre></p> </li> </ol> <p>Basic configuration for OpenWebUI and Pipeline:    Text Only<pre><code>webui.yourdomain.com {\n    reverse_proxy localhost:8080\n}\n\npipeline.yourdomain.com {\n    reverse_proxy localhost:9099\n}\n</code></pre></p> <ol> <li>Start and Enable Caddy    Bash<pre><code>sudo systemctl restart caddy\nsudo systemctl enable caddy\n</code></pre></li> </ol>"},{"location":"dns_ssl_setup/#dns-configuration","title":"DNS Configuration","text":"<ol> <li>Set up A/AAAA Records</li> <li>Point your domain/subdomain to your server's IP</li> <li> <p>If using dynamic DNS, this is handled automatically</p> </li> <li> <p>Verify DNS Propagation    Bash<pre><code>dig webui.yourdomain.com\ndig pipeline.yourdomain.com\n</code></pre></p> </li> </ol>"},{"location":"dns_ssl_setup/#troubleshooting","title":"Troubleshooting","text":"<ol> <li> <p>Check Caddy Status    Bash<pre><code>sudo systemctl status caddy\n</code></pre></p> </li> <li> <p>View Caddy Logs    Bash<pre><code>sudo journalctl -u caddy\n</code></pre></p> </li> <li> <p>Verify SSL Certificates    Bash<pre><code>curl -vI https://webui.yourdomain.com\n</code></pre></p> </li> </ol>"},{"location":"dns_ssl_setup/#next-steps","title":"Next Steps","text":"<p>Once DNS and SSL are configured, proceed to Installation Guide for setting up OpenWebUI and VMPilot.</p>"},{"location":"getting-started/","title":"Getting Started with VMPilot","text":""},{"location":"getting-started/#introduction","title":"Introduction","text":"<p>VMPilot is a powerful tool that enables collaboration with Large Language Models (LLMs) in a virtual machine environment. While primarily designed for software development tasks, it can be utilized for any operation that benefits from LLM assistance in a VM context.</p>"},{"location":"getting-started/#setting-up-your-environment","title":"Setting Up Your Environment","text":"<p>Before you start using VMPilot, make sure you have:</p> <ol> <li>Completed the installation process</li> <li>Configured your API keys</li> <li>Familiarized yourself with the Open WebUI interface</li> </ol> <p>For optimal cost control and usage tracking: 1. Create a dedicated API key for VMPilot 2. Set specific budget limits 3. Monitor usage separately from other API applications 4. Regularly review consumption patterns</p>"},{"location":"getting-started/#basic-usage","title":"Basic Usage","text":"<p>VMPilot comes with three core tools out of the box:</p> <ol> <li>Shell Tool: Executes shell commands and scripts</li> <li>File Editing Tool: Modifies existing files</li> <li>File Creation Tool: Creates new files with specified content</li> </ol> <p>Obviously, using the shell tool, the LLM can do everything it needs to do. Editing files is hard for LLMS, so the file editing tool provides better structure for that. The file creation tool mostly provides good error reporting and structure for creating files.</p>"},{"location":"getting-started/#effective-communication-with-vmpilot","title":"Effective Communication with VMPilot","text":""},{"location":"getting-started/#managing-conversations","title":"Managing Conversations","text":"<p>Long conversations can reduce effectiveness. To maintain quality:</p> <ol> <li>Keep conversations focused on specific tasks</li> <li>Start new sessions for new topics</li> <li>Include relevant context when starting fresh</li> </ol>"},{"location":"getting-started/#task-management","title":"Task Management","text":"<p>Break down complex tasks: - Divide large tasks into smaller, manageable steps - Verify each step before proceeding - Combine manual work with LLM assistance when needed</p>"},{"location":"getting-started/#security-note","title":"Security Note","text":"<p>[!CAUTION] VMPilot operates with the user permissions. The LLM can execute any command available to the user account, including: - Reading and writing files - Installing packages - Running system commands</p> <p>Always ensure you only grant access to directories and permissions you trust the LLM to handle.</p>"},{"location":"getting-started/#typical-operation","title":"Typical operation","text":"<ol> <li>Start a new conversation in the OpenWebUI interface</li> <li>Describe the task you want the LLM to perform.</li> <li>The LLM performs the task and provides the output of any commands it runs.</li> <li>Rinse and repeat.</li> </ol>"},{"location":"getting-started/#tracking-changes-with-git","title":"Tracking Changes with Git","text":"<p>To track changes made by the LLM, we recommend using a clean git branch. This approach allows you to:</p> <ol> <li>See exactly what the LLM has modified using <code>git diff</code></li> <li>Review changes before committing them</li> <li>Maintain a clean history of your collaboration with the LLM</li> <li>Easily revert changes if needed</li> </ol> <p>Example of a typical VMPilot interaction: Text Only<pre><code>user: create a hello world example in /tmp\nclaude-VMPilot:\nI'll help you create a simple \"Hello, World!\" program. Since the request is to create a file but doesn't specify the exact filename, I'll create a Python file named hello.py in the /tmp directory.I've created a simple Python \"Hello, World!\" program in /tmp/hello.py. Let's verify the file was created and check its contents:\n$ cat /tmp/hello.py\n'''python\n#!/usr/bin/env python3\n\ndef main():\n    print(\"Hello, World!\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\nLet's make the script executable and run it to make sure it works:\n$ chmod +x /tmp/hello.py &amp;&amp; /tmp/hello.py\n'''bash\nHello, World!\n```\n\nThe program has been created successfully and works as expected! The script:\n\n1. Is located at /tmp/hello.py\n1. Has proper Python shebang line\n1. Uses a main() function with the standard name  check\n1. Successfully prints \"Hello, World!\" when executed\n</code></pre></p>"},{"location":"getting-started/#notes","title":"Notes","text":"<ul> <li> <p>The LLM tends to be a bit verbose and has a bias towards action. It will, as is often the case with LLMs, try its best to answer your question, or perform the task you've asked it to do, rather than ask for clarification. You can change that by asking it to just discuss the task or ask for clarification. You can also, in your prompt, change its behavior.</p> </li> <li> <p>It typically performs several operations to accomplish a task. In our case, it created the script, and ran it to verify that it works.</p> </li> <li> <p>Outputs are fenced in the appropriate language for easy reading.</p> </li> <li> <p>The LLM will often provide additional information about the task it performed, such as the location of the file it created, the contents of the file, and the output of any commands it ran.</p> </li> <li> <p>With the multi-project support feature, you no longer need to explicitly tell the LLM where your project is located in each prompt. Configure it once in your workspace system prompt with <code>$PROJECT_ROOT=/path/to/your/project</code> and VMPilot will automatically maintain the correct context.</p> </li> </ul>"},{"location":"getting-started/#choosing-the-provider","title":"Choosing the provider","text":"<p>We support Anthropic primarily, but you can also try OpenAI. You choose the provider you want to use in the OpenWebUI interface on the top left. This is quite similar to how you would choose a model in OpenAI's interface. We recommend however that you use Workspaces since they allow you to both choose the model and prompt you want to use.</p>"},{"location":"getting-started/#working-with-projects","title":"Working with Projects","text":"<p>VMPilot is designed to work with projects and git repos. A project is a directory containing all the files and resources for your project, typically a git repository. VMPilot can work with multiple projects simultaneously, allowing you to switch between them easily.</p> <p>VMPilot automatically performs a 'cd' to the project directory when starting a chat, ensuring all file paths, shell commands, and operations are relative to the project directory.</p>"},{"location":"getting-started/#project-directory-configuration","title":"Project Directory Configuration","text":"<p>There are two ways to specify which project directory VMPilot should use:</p> <ol> <li> <p>Default Project Directory: Set in <code>config.ini</code> using the <code>default_project</code> setting under the <code>[general]</code> section. This is used when no specific project is identified in a workspace.</p> </li> <li> <p>Workspace-Specific Project Directory: Specify the project root in your workspace system prompt using:    Text Only<pre><code>$PROJECT_ROOT=/path/to/your/project\n</code></pre></p> </li> </ol>"},{"location":"getting-started/#multi-project-support","title":"Multi-Project Support","text":"<p>The multi-project support feature simplifies working with multiple codebases:</p> <ol> <li> <p>No need for manual project root specification:    Previously, you had to include phrases like \"The root directory of this project is '/path/to/project'\" in your prompts. Now simply add <code>$PROJECT_ROOT=/path/to/your/project</code> to your workspace system prompt once.</p> </li> <li> <p>Workspace-specific project contexts:</p> </li> <li>Create separate workspaces for different projects</li> <li>Each workspace maintains its own project context</li> <li> <p>All operations (file editing, shell commands, git) automatically work in the correct directory</p> </li> <li> <p>Set a default project:    Configure <code>default_project</code> in your <code>config.ini</code> file to provide a fallback when no project is specified.</p> </li> <li> <p>Seamless project switching:    When switching between workspaces, VMPilot automatically changes to the appropriate project directory without any additional commands.</p> </li> </ol>"},{"location":"getting-started/#multi-branch-development","title":"Multi-Branch Development","text":"<p>VMPilot supports working on multiple branches or features simultaneously through workspace management:</p>"},{"location":"getting-started/#setting-up-for-parallel-development","title":"Setting Up for Parallel Development","text":"<ol> <li> <p>Create separate workspaces for different branches:    Text Only<pre><code>Workspace 1: feature-a\n$PROJECT_ROOT=~/project-feature-a\n\nWorkspace 2: feature-b\n$PROJECT_ROOT=~/project-feature-b\n</code></pre></p> </li> <li> <p>Switch between workspaces using the OpenWebUI workspace dropdown to instantly change context.</p> </li> <li> <p>Work on different branches simultaneously:</p> </li> <li>Each workspace maintains its own repository context</li> <li>You can have the same project in different directories to work on different branches</li> <li>Perfect isolation between features/branches</li> </ol>"},{"location":"getting-started/#example-workflow","title":"Example Workflow","text":"<ol> <li>Create two workspaces in OpenWebUI:</li> <li><code>feature-a</code> with <code>$PROJECT_ROOT=~/project-feature-a</code></li> <li> <p><code>feature-b</code> with <code>$PROJECT_ROOT=~/project-feature-b</code></p> </li> <li> <p>Clone your repository to both directories and check out different branches in each.</p> </li> <li> <p>Work in the <code>feature-a</code> workspace on one feature branch, then switch to the <code>feature-b</code> workspace to work on another feature branch.</p> </li> <li> <p>Use standard Git operations to keep branches in sync with the remote repository.</p> </li> </ol> <p>This approach provides clean separation between feature work while maintaining context awareness through OpenWebUI's workspace feature and standard Git practices.</p>"},{"location":"getting-started/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/#steps-limit-exceeded","title":"Steps Limit Exceeded","text":"<p>If you see the message: \"Sorry, need more steps to process this request. I've done 25 steps in a row. Let me know if you'd like me to continue,\" this means the agent has reached its built-in recursion limit. This limit prevents it from getting stuck in a loop.</p> <p>When you see this message, you can either: - Type \"continue\" to let the agent continue processing - Break down the task into smaller steps</p>"},{"location":"getting-started/#llm-issues-and-error-handling","title":"LLM Issues and Error Handling","text":"<p>The LLM may sometimes encounter errors when using tools. Common errors include:</p> <ul> <li>\"Field required [type=missing, input_value={}, input_type=dict]\"</li> <li>\"messages.1.content.1.tool_use.name: String should match pattern '^[a-zA-Z0-9_-]{1,64}$'\"}\"</li> <li>\"messages.5.content.1.tool_use.name: String should have at most 64 characters'}}\"</li> </ul> <p>These errors typically occur when: - The LLM tries to edit a file with a large amount of content - The conversation history becomes too large (8000+ tokens)</p> <p>To resolve these issues: - Type \"continue\" to let the LLM recover and continue - Ask the LLM to create a new file instead of editing an existing one - Start a new, shorter conversation - Break down the task into smaller steps</p>"},{"location":"getting-started/#stopping-the-llm","title":"Stopping the LLM","text":"<p>If the LLM gets stuck or goes in the wrong direction, hit the \"Stop\" button to reset the LLM and start fresh.</p>"},{"location":"getting-started/#additional-features","title":"Additional Features","text":""},{"location":"getting-started/#plugins","title":"Plugins","text":"<p>VMPilot supports various plugins to extend its functionality. See the Plugins documentation for details about available plugins and how to use them.</p> <p>Some key plugins include:</p> <ul> <li>GitHub Issues - Manage GitHub issues directly from VMPilot</li> <li>Documentation - Create clear, concise, and user-friendly documentation</li> <li>Testing - Create comprehensive tests for VMPilot components (unit tests, end-to-end tests, coverage analysis)</li> <li>Code Map - Generate code documentation automatically. This is a work in progress.</li> </ul>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<p>For more detailed information about using the web interface, see Using Open WebUI with VMPilot.</p>"},{"location":"git-tracking/","title":"Git Tracking","text":"<p>VMPilot includes built-in Git integration to track and manage changes made by the AI assistant. This feature ensures all modifications to your codebase are properly recorded, making it easier to review, revert, or understand changes.</p>"},{"location":"git-tracking/#motivation","title":"Motivation","text":"<p>Git tracking is optional but highly recommended when working with VMPilot. It provides several benefits:</p> <ul> <li>Transparency: Understand what changes the AI assistant made to the codebase</li> <li>Safety: Ensure changes are tracked and can be reverted if needed</li> <li>Documentation: VMPilot automatically generates commit messages for each change</li> </ul>"},{"location":"git-tracking/#how-git-tracking-works","title":"How Git Tracking Works","text":"<p>When enabled, VMPilot's Git tracking:</p> <ol> <li>Checks the status of your Git repository at the start of each exchange</li> <li>Stashes or stops if the repository is dirty, has uncommitted changes. You can configure the behavior in the <code>dirty_repo_action</code> setting</li> <li>Tracks changes made during VMPilot exchanges. An exchange is a request you make and the response and actions taken by VMPilot. At the end of each exchange VMPilot will commit the changes to the repository</li> </ol>"},{"location":"git-tracking/#configuration","title":"Configuration","text":"<p>Configure Git tracking in the <code>[git]</code> section of your <code>config.ini</code> file:</p> Setting Description Default Options enabled Enable or disable Git tracking true true/false dirty_repo_action Action to take when repository has uncommitted changes stash stop, stash auto_commit Automatically commit changes after each exchange true true/false commit_message_style Style of generated commit messages bullet_points short, detailed, bullet_points model LLM model used for commit message generation claude-3-7-sonnet-latest (any supported model) provider LLM provider for commit message generation anthropic anthropic, openai temperature Temperature for commit message generation 0.7 0.0-1.0 commit_prefix Prefix added to all commit messages [VMPilot] (any text)"},{"location":"git-tracking/#example-configuration","title":"Example Configuration","text":"INI<pre><code>[git]\nenabled = true\ndirty_repo_action = stash\nauto_commit = true\ncommit_message_style = bullet_points\nmodel = claude-3-7-sonnet-latest\nprovider = anthropic\ntemperature = 0.7\ncommit_prefix = [VMPilot]\n</code></pre>"},{"location":"git-tracking/#best-practices","title":"Best Practices","text":"<ol> <li>Clean Repository: Start with a clean repository before asking VMPilot to make changes</li> <li>Review Commits: Always review the commits made by VMPilot to ensure they're appropriate</li> <li>Branch Strategy: Consider having VMPilot work in a dedicated branch for larger changes</li> <li>Multi-Branch Development: Use separate workspaces with different project directories to work on multiple branches simultaneously. See Multi-Branch Development for details.</li> </ol>"},{"location":"git-tracking/#limitations","title":"Limitations","text":"<ul> <li>VMPilot cannot resolve complex merge conflicts</li> <li>The system works best with simple, linear Git histories</li> <li>Very large diffs might result in less precise commit messages</li> </ul>"},{"location":"installation/","title":"VMPilot Installation Guide","text":"<ul> <li>VMPilot Installation Guide<ul> <li>Prerequisites</li> <li>Recommended Installation: Docker<ul> <li>Docker Installation Steps</li> <li>Port Configuration</li> </ul> </li> <li>1.2 Manual Installation<ul> <li>1.2.1 Virtual Machine Setup</li> <li>1.2.2 Install OpenWebUI Pipelines</li> <li>1.2.3 Install dependencies:</li> <li>1.2.4 Installing VMPilot</li> <li>1.2.5 Server Installation</li> <li>1.2.6 Configuration Setup</li> <li>1.2.7 Start VMPilot</li> </ul> </li> <li>2. First-Time Setup<ul> <li>2.1 Accessing the Web Interface</li> <li>2.2 Configuring API Keys</li> </ul> </li> <li>3. Verification</li> <li>4. Troubleshooting</li> <li>5. Project Configuration Setup<ul> <li>5.1 Project Directory Structure</li> <li>5.2 Initial Project Setup</li> <li>5.3 Project Description File</li> <li>Container Issues</li> <li>Access Issues</li> <li>Configuration Issues</li> <li>Resource Issues</li> </ul> </li> </ul> </li> </ul> <p>This guide provides step-by-step instructions for installing VMPilot in your environment. VMPilot comes with Open WebUI bundled in the Docker container, providing a seamless, integrated installation experience with a powerful web interface.</p> <p>[!CAUTION] Only run VMPilot if you understand the security implications of running arbitrary commands in your virtual machine. Never run this directly on your personal machine. You are letting the AI/LLM run commands in your machine which can be dangerous.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have: - Docker installed on your system - Basic familiarity with Docker and Linux - For secure remote access, complete the DNS and SSL Setup before proceeding</p>"},{"location":"installation/#recommended-installation-docker","title":"Recommended Installation: Docker","text":"<p>VMPilot is available as a Docker container from GitHub Container Registry (ghcr.io). This container includes both VMPilot and Open WebUI pre-configured to work together.</p>"},{"location":"installation/#docker-installation-steps","title":"Docker Installation Steps","text":"<ol> <li>Download the installation script, review it, and then run it:</li> </ol> Bash<pre><code># Download the installation script\ncurl -sSL https://raw.githubusercontent.com/drorm/vmpilot/main/bin/install.sh -o install_vmpilot.sh\n\n# Review the script and make any necessary changes\n# For example, you may want to change the target directory (VMPILOT_DIR)\nnano install_vmpilot.sh\n\n# Make the script executable\nchmod +x install_vmpilot.sh\n\n# Run the installation script\n./install_vmpilot.sh\n</code></pre> <p>This script will: - Create the necessary directories (default is <code>$HOME/.vmpilot/</code>) - Pull the latest VMPilot image from GitHub Container Registry - Start the container with proper configuration - Copy the default configuration file</p> <ol> <li> <p>Verify the container is running: Bash<pre><code>docker ps | grep vmpilot\n</code></pre></p> </li> <li> <p>Access the web interface:</p> </li> <li>Open your browser and navigate to <code>http://localhost:8080</code></li> <li>Follow the steps in Using the Web UI to complete setup</li> </ol>"},{"location":"installation/#port-configuration","title":"Port Configuration","text":"<p>The VMPilot Docker container exposes two main ports: - Port 8080: Open WebUI interface - Port 9099: VMPilot pipeline server (internal communication)</p> <p>If you need to change these ports, modify the port mapping in your Docker run command:</p> Bash<pre><code>docker run -d \\\n  -p &lt;custom-webui-port&gt;:8080 \\\n  -p &lt;custom-pipeline-port&gt;:9099 \\\n  ... other options ...\n  ghcr.io/drorm/vmpilot:latest\n</code></pre>"},{"location":"installation/#12-manual-installation","title":"1.2 Manual Installation","text":""},{"location":"installation/#121-virtual-machine-setup","title":"1.2.1 Virtual Machine Setup","text":"<ul> <li>Set up your Docker virtual machine according to your requirements</li> <li>For enhanced security, install gvisor and configure your container runtime to use it</li> </ul>"},{"location":"installation/#122-install-openwebui-pipelines","title":"1.2.2 Install OpenWebUI Pipelines","text":"<p>OpenWebUI Pipelines is required for VMPilot integration.</p> Bash<pre><code>cd ~\ngit clone https://github.com/open-webui/pipelines\n</code></pre> <p>This will clone the repository to your home directory. This is the default location for VMPilot to look for the pipelines.</p>"},{"location":"installation/#123-install-dependencies","title":"1.2.3 Install dependencies:","text":"<p>Bash<pre><code>pip install -r requirements.txt\n</code></pre> You don't need to run the pipelines server, as VMPIlot will run it.</p>"},{"location":"installation/#124-installing-vmpilot","title":"1.2.4 Installing VMPilot","text":""},{"location":"installation/#125-server-installation","title":"1.2.5 Server Installation","text":"<p>Clone the VMPilot repository: Bash<pre><code>cd ~\ngit clone https://github.com/drorm/vmpilot.git\ncd vmpilot\n</code></pre></p> <p>Install dependencies: Bash<pre><code>pip install -r requirements.txt\n</code></pre></p> <p>Set up your credentials. The defaults are: - Anthropic: ~/.anthropic/api_key - OpenAI: ~/.openai</p>"},{"location":"installation/#126-configuration-setup","title":"1.2.6 Configuration Setup","text":"<p>For CLI usage: 1. Set up your password (required for CLI mode) 2. Review vmpilot/src/vmpilot/config.ini - the defaults will work for most setups 3. Optionally, you can set the environment variable VMPILOT_CONFIG to use a custom configuration file</p>"},{"location":"installation/#127-start-vmpilot","title":"1.2.7 Start VMPilot","text":"Bash<pre><code>~/vmpilot/bin/run.sh\n</code></pre>"},{"location":"installation/#2-first-time-setup","title":"2. First-Time Setup","text":"<p>After installing VMPilot, you'll need to complete a few setup steps to get started.</p>"},{"location":"installation/#21-accessing-the-web-interface","title":"2.1 Accessing the Web Interface","text":"<ol> <li> <p>After starting the VMPilot container, the Open WebUI interface is automatically available at:    Text Only<pre><code>http://localhost:8080\n</code></pre></p> </li> <li> <p>When you first access the interface, you'll need to create a user account. The first user created automatically becomes the admin.</p> </li> </ol>"},{"location":"installation/#22-configuring-api-keys","title":"2.2 Configuring API Keys","text":"<p>To use VMPilot with your preferred LLM provider:</p> <ol> <li>Click on your username in the bottom left corner</li> <li>Select \"Admin Panel\"</li> <li>Navigate to the \"Pipelines\" tab</li> <li>Enter your API keys for OpenAI, Anthropic, or both</li> <li>Click \"Save\"</li> </ol> <p>The connection between Open WebUI and VMPilot is pre-configured in the container, so you don't need to set up the connection manually.</p> <p>For more detailed information on using the web interface, see the Using Open WebUI guide.</p>"},{"location":"installation/#3-verification","title":"3. Verification","text":"<p>To verify your installation is working correctly:</p> <ol> <li>Open the web interface in your browser (http://localhost:8080)</li> <li>Log in with the user account you created</li> <li>Create a new conversation</li> <li>Choose one of the VMPilot models (Claude is recommended)</li> <li>Try a simple command like \"Show me the contents of /home\"</li> <li>VMPilot should execute the command and return the results</li> </ol> <p>If the command executes successfully, your installation is working properly.</p>"},{"location":"installation/#4-troubleshooting","title":"4. Troubleshooting","text":""},{"location":"installation/#5-project-configuration-setup","title":"5. Project Configuration Setup","text":"<p>After installing VMPilot, you'll want to set up project-specific configuration for each of your projects. </p>"},{"location":"installation/#51-project-directory-structure","title":"5.1 Project Directory Structure","text":"<p>When you start using VMPilot with a new project, it will check for the existence of the <code>.vmpilot</code> directory structure:</p> Text Only<pre><code>your-project/\n\u2514\u2500\u2500 .vmpilot/\n    \u2514\u2500\u2500 prompts/\n        \u2514\u2500\u2500 project.md\n</code></pre>"},{"location":"installation/#52-initial-project-setup","title":"5.2 Initial Project Setup","text":"<p>VMPilot will guide you through the setup process when you first use it with a project:</p> <ol> <li>Start a chat session in your project directory:Simply make a request like \"do pwd\"</li> <li>VMPilot will detect if the <code>.vmpilot</code> directory structure is missing</li> <li>You'll be presented with options:</li> <li>Create standard project files from a template</li> <li>Skip project setup</li> <li>When you choose to create standard project files, VMPilot will offer to:</li> <li>Analyze existing files and create a customized project description</li> <li>Let you do it manually</li> </ol>"},{"location":"installation/#53-project-description-file","title":"5.3 Project Description File","text":"<p>The <code>project.md</code> file contains essential information about your project that's included in the system prompt for each conversation. This helps VMPilot understand your project's context, structure, and requirements.</p> <p>For more details on project configuration, see the Project Plugin documentation.</p> <p>Common installation issues and solutions:</p>"},{"location":"installation/#container-issues","title":"Container Issues","text":"<ol> <li>Container fails to start:</li> <li>Check Docker logs: <code>docker logs vmpilot</code></li> <li>Verify Docker is running: <code>systemctl status docker</code></li> <li>Ensure you have sufficient disk space: <code>df -h</code></li> <li> <p>Check for port conflicts: <code>netstat -tuln | grep 8080</code></p> </li> <li> <p>Container starts but services are unavailable:</p> </li> <li>Check service status: <code>docker exec vmpilot supervisorctl status</code></li> <li>View logs for specific services:      Bash<pre><code>docker exec vmpilot tail -f /app/data/logs/vmpilot.log\ndocker exec vmpilot tail -f /app/data/logs/open-webui.log\n</code></pre></li> <li>Restart services if needed: <code>docker exec vmpilot supervisorctl restart all</code></li> </ol>"},{"location":"installation/#access-issues","title":"Access Issues","text":"<ol> <li>Cannot access web interface:</li> <li>Verify the container is running: <code>docker ps | grep vmpilot</code></li> <li>Check if port 8080 is accessible: <code>curl -I http://localhost:8080</code></li> <li>Ensure no firewall is blocking access: <code>sudo ufw status</code></li> <li>Try accessing from the host directly: <code>http://127.0.0.1:8080</code></li> </ol>"},{"location":"installation/#configuration-issues","title":"Configuration Issues","text":"<ol> <li>API key problems:</li> <li>Ensure you've entered valid API keys in the Open WebUI Admin Panel</li> <li>Check for error messages in the web interface</li> <li> <p>Verify your API keys work with the respective services</p> </li> <li> <p>Model not found:</p> </li> <li>Go to Admin Panel &gt; Pipelines and verify your API keys are correctly entered</li> <li>When using a workspace, edit the workspace and make sure the pipeline is selected</li> <li>Check if the model is available from your provider</li> </ol>"},{"location":"installation/#resource-issues","title":"Resource Issues","text":"<ol> <li>Performance problems:</li> <li>Check container resource usage: <code>docker stats vmpilot</code></li> <li>Verify the host has sufficient resources: <code>free -h</code> and <code>top</code></li> <li>Consider increasing container resource limits if necessary</li> </ol>"},{"location":"prompting/","title":"VMPilot Context Management System","text":""},{"location":"prompting/#understanding-vmpilots-approach","title":"Understanding VMPilot's Approach","text":"<p>Whenever you start a conversation with an LLM, it has no context or memory of previous interactions. You need to provide context and direction. VMPilot uses a multi-level prompting system to ensure the LLM has the necessary context to assist effectively.</p>"},{"location":"prompting/#context-layers","title":"Context Layers","text":""},{"location":"prompting/#1-project-context-workspace-level","title":"1. Project Context (Workspace Level)","text":"<p>Managed through OpenWebUI workspaces. Lets VMPilot know the root directory of the project. Bash<pre><code>$PROJECT_ROOT=/path/to/project\n</code></pre> The project plugin will create a <code>.vmpilot</code> directory in the project root, containing a <code>project.md</code> file with essential information about the project. The contents of the <code>project.md</code> file is included in the system prompt for each conversation, helping VMPilot understand the project context. See the Project Plugin for more details. Text Only<pre><code>### 2. Task Context (Branch Manager)\nLeveraged through the [Branch Manager plugin](plugins/branch_manager.md):\n\nWhen you ask VMPilot to create a new branch based on a GitHub issue, it will create a new branch with a name based on the issue title and number.\nWhen you start a new conversation in the project and branch, VMPilot includes the text and comments for the issue in the system prompt.\nThis ensures that VMPilot has the **full context** for the task at hand.\n\n## Workspace Management\n\n### Types of Workspaces\nOrganize your development environment with purpose-specific workspaces:\n\n1. **Provider-Specific**\n   ```yaml\n   Examples:\n   - OpenAI Development\n   - Claude Integration\n   - Gemini Integration\n   - Local Model Testing\n   ```\n\n2. **Domain-Focused**\n   ```yaml\n   Examples:\n   - Frontend Development\n   - Backend Services\n   - Infrastructure Management\n   ```\n\n### Workspace Setup Guide\n\n1. **Initial Configuration**\n   ```yaml\n   Steps:\n   1. Navigate to Workspace Settings\n   2. Create New (+) or Edit Existing\n   3. Configure Base Settings:\n      - Name: [descriptive identifier]\n      - Model: [preferred LLM]\n      - Temperature: [0.0-1.0]\n   ```\n\n2. **Context Setup**\n   ```yaml\n   Required Information:\n   - Project Directory: Absolute path\n   - Stack Definition: Technologies used\n   - Access Permissions: Required paths\n   - Development Rules: Team guidelines\n   ```\n\n### Using GitHub Integration\n\nAccess issue context with simple commands to the llm:\n```markdown\n# View specific issue\nLook at github issue 42\n\n# List recent issues\nShow open issues\n\n# Reference in discussion\nRegarding issue 42, can we...\n</code></pre></p>"},{"location":"prompting/#example-vmpilot-development-prompt","title":"Example: VMPilot Development Prompt","text":"<p>Below is the actual prompt used in VMPilot's development:</p> Markdown<pre><code># Project Overview: VMPilot\nAn AI-driven system operations assistant with CLI and API interfaces.\n\n## Location and structure\n\nThe base directory is $HOME/vmpilot.  Always **cd to this directory** before looking at the files.\n\n```bash\ncd $HOME/vmpilot &amp;&amp; ls\n```\n\n\nIgnore directories not listed below.\n\n\u251c\u2500\u2500 docs\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 source -- Documentation source files\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 user-guide\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 vmpilot -- Main source code directory\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 caching\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 plugins\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 codemap\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 github_issues\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 tools -- Llm Tool implementations\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 scripts -- Integration test scripts\n    \u251c\u2500\u2500 sample_files -- file used by tests\n    \u2514\u2500\u2500 unit -- Unit tests\n        \u2514\u2500\u2500 tools\n\n\n## Architecture\n* Supports multiple deployment modes:\n  - CLI mode (vmpilot-cli)\n  - Pipeline mode (OpenWebUI compatible, port 9099)\n\n## Development Guidelines\n* Tools follow standard interface with required methods\n* Pipeline integrates with OpenWebUI specification\n\n#### /src/vmpilot/\nMain source code directory containing the core implementation.\n- **Core Files**:\n  - vmpilot.py: Main application entry point. Implements the Pipeline mode.\n  - agent.py: Core implementation for the agent\n    - Handles LLM setup and configuration\n    - Implements message processing pipeline\n    - Manages tool integration\n  - config.py: Configuration management\n  - cli.py: Command-line interface implementation\n\n#### /src/vmpilot/tools/\nTool implementations for various functionalities.\n  - CreateFileTool: Create a file\n  - EditTool: Edit a file\n  - SetupShellTool: shell tool\n\n#### /bin/\nExecution scripts:\n- cli.sh: CLI launcher\n- run.sh: Main execution script for the openwebui pipeline\n\n#### /tests/\nTest suite and testing utilities:\n- Test harnesses\n- Sample files\n- Integration tests\n\n## Key Features\n\n1. **LLM Integration**\n   - Supports multiple providers (Anthropic, OpenAI)\n   - Configurable models and parameters\n   - Streaming response capability\n\n2. **Tool System**\n   - Extensible tool framework\n   - Built-in file and system operations\n   - Error handling and result management\n\n3. **Pipeline Architecture**\n   - Message processing pipeline\n   - Asynchronous operation support\n   - State management and checkpointing\n\n4. **Development Tools**\n   - Comprehensive testing framework\n   - Deployment automation\n   - Development utilities\n\n## Testing and Development\n- Structured test suite in /tests\n- Integration test scripts\n- Sample files for testing\n\n## Common Usage Patterns\n### CLI Mode\n- cli.sh \"Show me /home\"\n- cli \"create a hello world example in /tmp/hello.py\"\n</code></pre>"},{"location":"prompting/#github-issues-as-prompts","title":"Github issues as prompts","text":"<p>To provide context about the current task, we use the <code>github issues</code> plugin.  Just ask the llm to view the issue, and it will provide the context.</p>"},{"location":"prompting/#example","title":"Example","text":"<p>When working on the VMPilot docs, I ask:</p> <p>Markdown<pre><code>Look at github issue 3, documentation.\n\n    I added a new section \u201cPrompting\u201d. I\u2019m concerned, however that experienced users will skip it because they know how to prompt. However, this page has some important info about prompting in vmpilot\n</code></pre> And the llm responds: Markdown<pre><code>I'll help analyze these points. Let me first look at issue 3 and the documentation.\n```\n$ cd /home/dror/vmpilot &amp;&amp; gh issue view 3\ntitle:  Documentation System Setup with MkDocs and GitHub Pages\nstate:  OPEN\nauthor: dror-llm\nlabels: documentation, enhancement\ncomments:   2\nassignees:  drorm\nprojects:\nmilestone:  0.1\nnumber: 3\n--\n# Documentation System Setup with MkDocs and GitHub Pages\n...\n(and 64 more lines)\nLet me address each of your points:\n\n    Regarding the \"Prompting\" section concern:\n            You're right that this is a valid concern. Since VMPilot has specific prompting requirements/features, I suggest renaming it to something more specific like \"VMPilot-Specific Prompting\" or \"VMPilot Prompt System\" to differentiate it from general LLM prompting. This makes it clear that even experienced prompt engineers should read it.\n</code></pre></p>"},{"location":"release-process/","title":"VMPilot Release Process","text":"<p>This document outlines the process for creating and publishing VMPilot releases.</p>"},{"location":"release-process/#branching-strategy","title":"Branching Strategy","text":"<p>VMPilot follows a simplified Git Flow branching strategy:</p> <ul> <li><code>main</code> - Production-ready code, deployed to users</li> <li><code>dev</code> - Integration branch for development work</li> <li>Feature branches - Individual features branched from <code>dev</code></li> </ul> <p>All development work happens in feature branches, which are merged into <code>dev</code> via pull requests. When ready for release, <code>dev</code> is merged into <code>main</code>.</p>"},{"location":"release-process/#release-preparation","title":"Release Preparation","text":"<p>Before triggering the release workflow, run the local preparation script to ensure everything is ready:</p> Bash<pre><code>./scripts/prepare-release.sh -m &lt;milestone-number&gt;\n</code></pre> <p>This script will:</p> <ol> <li>Verify you're on the <code>dev</code> branch with no uncommitted changes</li> <li>Pull the latest changes from the remote repository</li> <li>Extract the version number from the milestone</li> <li>Run tests to ensure everything is working</li> <li>Generate draft release notes for review</li> <li>Open the notes in your editor for customization</li> <li>Check if there are any open issues in the milestone</li> <li>Provide instructions for triggering the release workflow</li> </ol>"},{"location":"release-process/#release-workflow","title":"Release Workflow","text":"<p>The actual release is handled by a GitHub Actions workflow that:</p> <ol> <li>Merges <code>dev</code> into <code>main</code></li> <li>Creates a GitHub release with version tag</li> <li>Builds and pushes the Docker image to GitHub Container Registry</li> <li>Closes the milestone</li> </ol> <p>To trigger the release workflow:</p> <ol> <li>Go to the Actions tab</li> <li>Click \"Run workflow\"</li> <li>Enter the milestone number</li> <li>Optionally select \"Create a draft release\" if you want to review before publishing</li> <li>Click \"Run workflow\"</li> </ol>"},{"location":"release-process/#versioning","title":"Versioning","text":"<p>VMPilot uses semantic versioning (MAJOR.MINOR.PATCH):</p> <ul> <li>MAJOR: Incompatible API changes</li> <li>MINOR: Backwards-compatible functionality</li> <li>PATCH: Backwards-compatible bug fixes</li> </ul> <p>Version numbers are stored in milestone titles.</p>"},{"location":"release-process/#post-release","title":"Post-Release","text":"<p>After a successful release:</p> <ol> <li>Verify the Docker image is available on GitHub Container Registry</li> <li>Check that the GitHub release was created correctly</li> <li>Ensure the milestone was closed</li> <li>Announce the release to users</li> </ol>"},{"location":"release-process/#hotfixes","title":"Hotfixes","text":"<p>For critical issues that need immediate fixes:</p> <ol> <li>Create a hotfix branch from <code>main</code></li> <li>Fix the issue and test thoroughly</li> <li>Create a PR to merge back to both <code>main</code> and <code>dev</code></li> <li>Create a new patch version release</li> </ol>"},{"location":"using-webui/","title":"Using Open WebUI with VMPilot","text":"<p>Open WebUI provides a rich, intuitive interface for interacting with VMPilot. This guide covers how to use the interface effectively after you've completed the installation process and have familiarized yourself with the basic concepts of VMPilot.</p>"},{"location":"using-webui/#accessing-open-webui","title":"Accessing Open WebUI","text":"<p>After starting the VMPilot container, you can access the Open WebUI interface at:</p> Text Only<pre><code>http://localhost:8080\n</code></pre>"},{"location":"using-webui/#first-time-setup","title":"First-time Setup","text":"<p>When you first access the Open WebUI interface, you'll need to:</p> <ol> <li>Create a user account (the first user automatically becomes the admin)</li> <li>Configure your API keys:</li> <li>Click on your username in the bottom left corner</li> <li>Select \"Admin Panel\"</li> <li>Click on \"Settings\" in the top menu</li> <li>Navigate to the \"Pipelines\" tab</li> <li>Enter your API keys for any providers you want to use: OpenAI, Anthropic, Google.</li> <li>Click \"Save\"</li> </ol>"},{"location":"using-webui/#available-vmpilot-models","title":"Available VMPilot Models","text":"<p>When using Open WebUI with VMPilot, you'll see two models in the pipeline list:</p> <ul> <li>VMPilot PipelineAnthropic (Claude)</li> <li>VMPilot PipelineOpenAI (GPT-4o)</li> <li>VMPilot PipelineGoogle AI</li> </ul> <p>Claude is currently the preferred model for VMPilot, as it: - Handles code-related tasks effectively - Offers good performance with VMPilot's caching system - Has been more extensively tested with VMPilot</p> <p>The landscape of AI models is rapidly evolving, so the other models may also be suitable for your needs. </p> <p>You can select your preferred model when creating or editing a workspace.</p>"},{"location":"using-webui/#working-with-the-interface","title":"Working with the Interface","text":"<p>Open WebUI provides several powerful features for working with VMPilot:</p>"},{"location":"using-webui/#workspaces","title":"Workspaces","text":"<p>Workspaces are powerful organizational tools that allow you to group related conversations, projects, and settings:</p> <ul> <li>Creating a Workspace: Click the \"+\" icon in the sidebar to create a new workspace</li> <li>Configuring a Workspace: Set workspace-specific settings, model preferences, and system prompts</li> <li>Switching Workspaces: Click on a workspace name or search for it in the drop-down on the top right corner</li> </ul>"},{"location":"using-webui/#effective-workspace-setup","title":"Effective Workspace Setup","text":"<p>For optimal results when setting up a workspace:</p> <ol> <li> <p>Choose descriptive names that reflect the purpose of the workspace (e.g., \"Frontend Development,\" \"Project X Backend\")</p> </li> <li> <p>Configure the system prompt with:</p> </li> <li>The root directory of your project: <code>$PROJECT_ROOT=/path/to/your/project</code></li> <li>Your technology stack</li> <li>A brief project description</li> <li> <p>Any specific instructions for the LLM</p> </li> <li> <p>Select the appropriate model for your needs:</p> </li> <li>Claude is recommended for code-related tasks</li> <li> <p>GPT models may be better for certain creative tasks</p> </li> <li> <p>Organize workspaces by project or function:</p> </li> <li>Create separate workspaces for different projects</li> <li>Consider creating dedicated workspaces for specific tasks (documentation, testing, etc.)</li> <li>Use workspaces to isolate different branches of the same project</li> </ol>"},{"location":"using-webui/#example-workspace-categories","title":"Example Workspace Categories","text":"<ul> <li>Project-specific workspaces (e.g., \"Project X - Frontend\")</li> <li>Model-specific workspaces (e.g., \"Project X with Claude\")</li> <li>Task-specific workspaces (e.g., \"Documentation Generation\")</li> <li>Branch-specific workspaces (e.g., \"Feature Y Development\")</li> </ul>"},{"location":"using-webui/#chat-features","title":"Chat Features","text":"<ul> <li>Code Highlighting: Code blocks are automatically highlighted for readability</li> <li>History Navigation: Browse previous conversations in the sidebar</li> <li>Response Streaming: See responses as they're generated. We don't stream the content of each message, but display the message, tool actions, and code blocks as they are generated.</li> </ul>"},{"location":"using-webui/#managing-conversations","title":"Managing Conversations","text":"<p>Effective conversation management helps you get the most out of VMPilot:</p>"},{"location":"using-webui/#conversation-length","title":"Conversation Length","text":"<p>Long conversations can reduce effectiveness as they: - Consume more tokens - May lead to context confusion - Can cause the LLM to hit token limits</p> <p>For best results: - Keep conversations focused on specific tasks - Start new sessions for new topics - Include relevant context when starting fresh</p>"},{"location":"using-webui/#editing-prompts","title":"Editing Prompts","text":"<p>You can refine your requests by editing your prompts: - Click the edit icon next to your message to modify it - This helps clarify your intent without starting over - Useful for correcting misunderstandings or adding details</p>"},{"location":"using-webui/#stopping-generation","title":"Stopping Generation","text":"<p>If the LLM gets stuck or goes in the wrong direction: - Click the \"Stop\" button to halt generation - This lets you redirect the conversation more efficiently - Particularly useful for long-running operations</p>"},{"location":"using-webui/#troubleshooting","title":"Troubleshooting","text":""},{"location":"using-webui/#common-issues","title":"Common Issues","text":""},{"location":"using-webui/#steps-limit-exceeded-message","title":"\"Steps Limit Exceeded\" Message","text":"<p>If you see: \"Sorry, need more steps to process this request. I've done 25 steps in a row. Let me know if you'd like me to continue.\"</p> <p>Solution: - Type \"continue\" to let the agent proceed - Or break the task into smaller parts</p>"},{"location":"using-webui/#llm-tool-errors","title":"LLM Tool Errors","text":"<p>If you see error messages like: - \"Field required [type=missing, input_value={}, input_type=dict]\" - \"messages.1.content.1.tool_use.name: String should match pattern...\"</p> <p>Causes: - Large file edits - Conversation history too large (8000+ tokens)</p> <p>Solutions: - Type \"continue\" to retry - Create new files instead of editing large ones - Start a fresh conversation - Break down complex tasks</p>"},{"location":"using-webui/#connection-issues","title":"Connection Issues","text":"<p>If you experience connection problems:</p> <p>Solutions: - Check that both VMPilot and Open WebUI are running - Verify API keys are correctly configured - Check network settings if using remote connections</p>"},{"location":"using-webui/#advanced-configuration-options","title":"Advanced Configuration Options","text":"<p>Open WebUI offers many additional features and settings to enhance your experience. For more detailed information, visit the Open WebUI documentation site.</p> <p>For VMPilot-specific configurations, refer to our Configuration Guide.</p>"},{"location":"examples/","title":"VMPilot Examples","text":"<p>This section showcases VMPilot's capabilities through screenshots of real interactions with the system. Each example demonstrates different aspects of VMPilot's functionality.</p>"},{"location":"examples/#available-examples","title":"Available Examples","text":"Example Description Hello World Creating a simple Hello World - a basic introduction to VMPilot FizzBuzz Implementation Implementing the classic FizzBuzz programming challenge in Python Create GitHub Issue Creating a GitHub issue for a Python TODO list application TODO App Part 1 Initial implementation of a Python TODO list application from GitHub Issue #26 TODO App Part 2 Completing the implementation and testing of the Python TODO list application"},{"location":"examples/fizzbuzz/","title":"Example: FizzBuzz Implementation","text":"<p>Objective: Create a simple FizzBuzz program in Python.</p>"},{"location":"examples/fizzbuzz/#interaction","title":"Interaction","text":""},{"location":"examples/fizzbuzz/#vmpilot-features-demonstrated","title":"VMPilot Features Demonstrated","text":"<ul> <li>Available Tools: </li> <li>Create File Tool: Used to create the Python file</li> <li>Shell Tool: Used to run bash commands and make the file executable</li> <li> <p>Edit File Tool: Used to modify the code when needed</p> </li> <li> <p>Tool Interaction:</p> </li> <li>When VMPilot uses a tool, the command or result appears in bold</li> <li>Shell tool output is displayed in code blocks and truncated to 10 lines (configurable)</li> <li>Limited output visibility provides opportunities to request code improvements</li> </ul>"},{"location":"examples/fizzbuzz/#final-implementation","title":"Final Implementation","text":""},{"location":"examples/github-issue/","title":"Example: Create GitHub Issue","text":"<p>Objective: Use VMPilot to create a new GitHub issue.</p>"},{"location":"examples/github-issue/#workflow","title":"Workflow","text":""},{"location":"examples/github-issue/#step-1-initial-request-and-planning","title":"Step 1: Initial Request and Planning","text":"<ul> <li>We begin by telling VMPilot that we want to create a GitHub issue</li> <li>Note that we specifically instruct it not to create files or the issue itself initially</li> <li>This is because VMPilot is designed to take action, and we first want to discuss and plan</li> </ul>"},{"location":"examples/github-issue/#step-2-issue-creation-process","title":"Step 2: Issue Creation Process","text":"<ul> <li>After sufficient planning and back-and-forth to ensure all details are correct, we instruct VMPilot to create the issue</li> <li>The process involves several steps:</li> <li>VMPilot examines the issue plugin to understand how to create an issue</li> <li>It checks the feature template to identify required fields</li> <li>It runs the appropriate GitHub CLI command to create the issue</li> <li>Finally, it reports back on the operation's success</li> </ul>"},{"location":"examples/github-issue/#key-points","title":"Key Points","text":"<ul> <li>VMPilot can interact with GitHub's API through the GitHub CLI</li> <li>The collaborative planning process ensures the issue meets requirements before creation</li> <li>The final result can be verified on GitHub: Issue #26</li> <li>This example demonstrates VMPilot's ability to integrate with external tools and services</li> </ul>"},{"location":"examples/hello-world/","title":"Example: Hello World","text":"<p>Objective: Create and run a Python script that displays the current date and time.</p>"},{"location":"examples/hello-world/#interaction","title":"Interaction","text":""},{"location":"examples/hello-world/#notes","title":"Notes","text":"<p>If you've used ChatGPT or Claude, this interface should be familiar:</p> <ul> <li>On the top left, you can select your preferred model</li> <li>The standard chat interface displays your request and VMPilot's response</li> <li>In the response, you can clearly see the actions taken by VMPilot:<ul> <li>Created /tmp/hello.py - VMPilot creates the Python file</li> <li>Running a bash command: $ python3 /tmp/hello.py - VMPilot executes the script</li> <li>The output of the command is displayed in a formatted code block</li> </ul> </li> </ul> <p>This simple example demonstrates how VMPilot can create files and execute commands based on natural language instructions.</p>"},{"location":"examples/todo1/","title":"Example: Todo List Application (Part 1)","text":"<p>Objective: Initial implementation of Issue #26: Create a Python todo list application</p>"},{"location":"examples/todo1/#context","title":"Context","text":"<ul> <li>In the previous example, we created GitHub Issue #26: Create a Python todo app</li> <li>We can now refer to this issue directly in our conversation with VMPilot</li> <li>Note: We initially ask VMPilot to discuss the issue before creating any files, to establish a clear plan</li> </ul>"},{"location":"examples/todo1/#initial-planning","title":"Initial Planning","text":"<ul> <li>It started above by looking at the issue and some files, and suggests a comprehensive plan to implement the issue.</li> <li>The plan looks good overall, but needs refining to save the data to a JSON file. </li> <li> <p>The LLM starts to implement the plan.</p> </li> <li> <p>And I ask it to run the app to test it.</p> </li> </ul> <p></p> <p></p> <ul> <li>The testing looks good, but I noticed that the JSON file is in the root of the project, and I wanted it in the same directory as the app. So I ask the LLM to fix that and review the README.</li> </ul> <p></p> <p></p> <p></p> <p></p>"},{"location":"examples/todo2/","title":"Example: Todo List Application (Part 2)","text":"<p>Objective: Complete implementation of Issue #26: Python todo list application</p>"},{"location":"examples/todo2/#context","title":"Context","text":"<ul> <li>In Part 1, we began implementing the TODO app based on GitHub Issue #26</li> <li>This example demonstrates how to complete the implementation, verify functionality, and update documentation</li> <li>By starting with \"look at issue #26\", we provide VMPilot with the necessary context</li> <li>The GitHub issue contains most requirements, so detailed explanations aren't needed in our prompts</li> </ul> <ul> <li>Until now the LLM has been gathering information about the task. It looks at the github issue and various files. Now it starts to act.</li> <li> <p>It tests the CRUD opeations: Create, Read, Update, Delete.  </p> </li> <li> <p>Notice that we're getting the message: Sorry, need more steps to process this request. I've done 25 steps in a row. Let me know if you'd like me to continue. This is a safety mechanism to make sure the LLM is not stuck in a loop. The number is configurable. Simply type \"continue\" and the LLM will go on as in this example.  </p> </li> <li> <p>And that's it. We have a working todo app with CRUD operations and a README file that describes how to use it.</p> </li> <li>We skipped some steps/screenshots to keep the example short. </li> </ul>"},{"location":"plugins/branch-manager/","title":"Branch Manager Plugin","text":"<p>The Branch Manager Plugin automates Git branch creation for GitHub issues, streamlining the workflow between issue tracking and development. </p>"},{"location":"plugins/branch-manager/#purpose","title":"Purpose","text":"<p>This plugin helps developers:</p> <ul> <li>Create properly named Git branches for GitHub issues</li> <li>Follow consistent branch naming conventions</li> <li>Avoid common errors like duplicate branches</li> <li>Streamline the workflow when starting work on a new issue</li> </ul> <p>Branch creation is initiated by the user, and the plugin handles the rest.</p>"},{"location":"plugins/branch-manager/#features","title":"Features","text":"<p>The Branch Manager provides several key capabilities:</p> <ul> <li>Automated Branch Creation: Creates and pushes branches with proper naming conventions</li> <li>Issue Integration: Fetches issue details directly from GitHub</li> <li>Conflict Detection: Checks if branches already exist locally or remotely</li> <li>Similar Issue Detection: Prevents confusion between similar issue numbers (e.g., issue-34 vs issue-334)</li> <li>Error Handling: Provides informative output for troubleshooting</li> </ul>"},{"location":"plugins/branch-manager/#branch-naming-convention","title":"Branch Naming Convention","text":"<p>When creating branches, the plugin follows these rules:</p> <ul> <li>Starts with a lowercase category (feature, bug, docs, chore, etc.)</li> <li>Includes the issue number</li> <li>Adds a short, hyphen-separated summary derived from the issue title</li> <li>Replaces spaces with hyphens</li> <li>Uses all lowercase</li> <li>Supports both dash and slash separators (e.g., <code>feature-65</code> or <code>feature/65</code>)</li> </ul> <p>Example: <code>feature/65-implement-vmpilot-prompts</code></p>"},{"location":"plugins/branch-manager/#usage","title":"Usage","text":""},{"location":"plugins/branch-manager/#creating-a-branch-for-an-issue","title":"Creating a Branch for an Issue","text":"<p>To create a branch for a GitHub issue, just ask VMPilot to use the Branch Manager Plugin to create the branch for the issue number you provide.</p>"},{"location":"plugins/branch-manager/#workflow-integration","title":"Workflow Integration","text":"<p>The Branch Manager Plugin integrates seamlessly with VMPilot's workflow:</p> <ol> <li>Issue Assignment: A GitHub issue is assigned to you</li> <li>Branch Creation: Use the plugin to create a properly named branch</li> <li>Development: Make your changes on the new branch</li> <li>Pull Request: Create a PR when your changes are ready for review</li> </ol> <p>This workflow ensures that all code changes are properly tracked and linked to their corresponding issues.</p>"},{"location":"plugins/documentation/","title":"Documentation Plugin","text":"<p>The Documentation Plugin for VMPilot helps users create and maintain clear, concise, and factual documentation following best practices for technical writing and working with the MkDocs documentation system.</p>"},{"location":"plugins/documentation/#overview","title":"Overview","text":"<p>Technical documentation is essential for project usability, but creating effective documentation can be challenging. The Documentation Plugin provides guidance for creating documentation that is:</p> <ul> <li>Clear and concise</li> <li>Factual and straightforward</li> <li>Properly structured</li> <li>Easy to navigate and understand</li> <li>Free of marketing language and exaggerated claims</li> </ul>"},{"location":"plugins/documentation/#features","title":"Features","text":"<p>The Documentation Plugin offers assistance with:</p> <ul> <li>Creating new documentation pages</li> <li>Structuring content effectively</li> <li>Applying plain language principles</li> <li>Working with MkDocs features</li> <li>Formatting content for readability</li> <li>Avoiding common documentation pitfalls</li> </ul>"},{"location":"plugins/documentation/#vmpilot-documentation-system","title":"VMPilot Documentation System","text":"<p>VMPilot uses MkDocs with the Material theme for its documentation system:</p> <ul> <li>Configuration: Located at <code>/home/dror/vmpilot/mkdocs.yml</code></li> <li>Source files: Markdown files in the <code>/home/dror/vmpilot/docs/source</code> directory</li> <li>Navigation: Defined in the <code>nav</code> section of the MkDocs configuration file</li> </ul>"},{"location":"plugins/documentation/#documentation-structure","title":"Documentation Structure","text":"<ul> <li>Main documentation pages are in the root of <code>docs/source</code></li> <li>Examples are in the <code>docs/source/examples</code> directory</li> <li>Plugin documentation is in the <code>docs/source/plugins</code> directory</li> <li>Assets and images are stored in their respective directories</li> </ul>"},{"location":"plugins/documentation/#documentation-guidelines","title":"Documentation Guidelines","text":""},{"location":"plugins/documentation/#avoid-marketing-language","title":"Avoid Marketing Language","text":"<p>Good documentation focuses on facts rather than hype:</p> <ul> <li>Describe functionality accurately without embellishment</li> <li>Avoid superlatives like \"revolutionary,\" \"groundbreaking,\" or \"best-in-class\"</li> <li>Focus on what the project does, not how amazing it allegedly is</li> <li>Use objective descriptions rather than subjective praise</li> </ul>"},{"location":"plugins/documentation/#content-structure","title":"Content Structure","text":"<ul> <li>Put the most important information first, followed by details</li> <li>Organize content around user tasks, not system organization</li> <li>Use descriptive section headings that convey meaning</li> <li>Limit content to three or fewer levels of hierarchy per page</li> <li>Ensure each page stands on its own with proper context</li> </ul>"},{"location":"plugins/documentation/#writing-style","title":"Writing Style","text":"<ul> <li>Use the imperative form (e.g., \"Click Save\" instead of \"You should click Save\")</li> <li>Use second person (e.g., \"you\" and \"your\") for instructions</li> <li>Use active voice with strong verbs (e.g., \"We mailed your form\" not \"Your form was mailed\")</li> <li>Use conversational tone and contractions (e.g., \"we're\" instead of \"we are\")</li> <li>Eliminate unnecessary words and be concise</li> </ul>"},{"location":"plugins/documentation/#formatting-for-readability","title":"Formatting for Readability","text":"<ul> <li>Create short paragraphs (5-7 lines maximum)</li> <li>Use lists and bullets for easy scanning</li> <li>Separate content into small, digestible chunks</li> <li>Use white space generously to improve scan-ability</li> </ul>"},{"location":"plugins/documentation/#mkdocs-features","title":"MkDocs Features","text":"<p>The plugin can help you leverage MkDocs features to enhance documentation readability:</p> <ul> <li>Code blocks with syntax highlighting</li> <li>Admonitions (notes, warnings, tips)</li> <li>Tables for organized data presentation</li> <li>Tabs for alternative content views</li> </ul>"},{"location":"plugins/documentation/#usage-examples","title":"Usage Examples","text":""},{"location":"plugins/documentation/#converting-passive-to-active-voice","title":"Converting Passive to Active Voice","text":"Text Only<pre><code>Passive: \"The configuration file is modified by the system when errors are detected.\"\nActive: \"The system modifies the configuration file when it detects errors.\"\n</code></pre>"},{"location":"plugins/documentation/#making-text-concise","title":"Making Text Concise","text":"Text Only<pre><code>Wordy: \"In the event that you would like to make changes to your account settings, you can navigate to the account settings page where you will find a variety of different options.\"\nConcise: \"To change your account settings, go to the Settings page.\"\n</code></pre>"},{"location":"plugins/documentation/#creating-scannable-content","title":"Creating Scannable Content","text":"Text Only<pre><code>Original paragraph:\n\"The installation process requires several prerequisites including Python 3.8 or higher, pip package manager, and at least 2GB of RAM. You'll also need to ensure you have administrator privileges on your system before beginning the installation. The installation can take approximately 10-15 minutes depending on your internet connection speed.\"\n\nScannable version:\n\"Before installation, ensure you have:\n- Python 3.8 or higher\n- pip package manager\n- 2GB RAM minimum\n- Administrator privileges\n\nInstallation time: 10-15 minutes (varies with internet speed)\"\n</code></pre>"},{"location":"plugins/github/","title":"GitHub Plugin","text":"<p>The GitHub plugin is a crucial component of VMPilot that enables integration with GitHub's issue tracking system. It allows you to create, view, and manage GitHub issues directly from your VMPilot sessions, providing continuity and context for your development tasks.</p>"},{"location":"plugins/github/#overview","title":"Overview","text":"<p>This plugin leverages the GitHub CLI (<code>gh</code>) to interact with GitHub repositories. It enables VMPilot to:</p> <ul> <li>Create new issues with appropriate templates and labels</li> <li>View existing issues and their details</li> <li>Comment on issues to track progress</li> <li>Close and reopen issues as needed</li> </ul>"},{"location":"plugins/github/#why-it-matters","title":"Why It Matters","text":"<p>The GitHub plugin transforms how you work with VMPilot by providing several key benefits:</p> <ol> <li> <p>Context Preservation: Start a chat with \"look at issue 123\" to instantly provide context to the LLM about what you're working on, eliminating the need to repeatedly describe the same task.</p> </li> <li> <p>Structured Problem Definition: Collaborate with the LLM to articulate what you're trying to accomplish, to flesh out the details.</p> </li> <li> <p>Progress Tracking: Adding comments to issues creates a timeline of your work, helping the LLM keep track of the progress and decisions.</p> </li> <li> <p>Collaborative Workflow: Even when working alone with the LLM, you can use issues in the same way a team of developers would collaborate, providing a structured approach to development.</p> </li> </ol>"},{"location":"plugins/github/#prerequisites","title":"Prerequisites","text":"<p>To use the GitHub plugin, you need:</p> <ul> <li>GitHub CLI (<code>gh</code>) installed and configured on your system</li> <li>Authentication with GitHub (<code>gh auth login</code>)</li> <li>A GitHub repository </li> </ul>"},{"location":"plugins/github/#common-commands","title":"Common Commands","text":""},{"location":"plugins/github/#viewing-issues","title":"Viewing Issues","text":"<p>To view an issue and its details:</p> Bash<pre><code>look at issue 16\n</code></pre> <p>To see comments associated with an issue:</p> Bash<pre><code>look at issue 16 with comments\n</code></pre> <p>To list all open issues:</p> Bash<pre><code>show me all open issues\n</code></pre>"},{"location":"plugins/github/#creating-issues","title":"Creating Issues","text":"<p>To create a new issue:</p> Bash<pre><code>Let's discuss creating \"new feature\".\n</code></pre> <p>VMPilot will: 1. Ask you clarifying questions about the issue 2. Guide you through filling out the required fields based on issue templates 3. Confirm with you before creating the issue 4. Provide the issue number and link once created</p>"},{"location":"plugins/github/#commenting-on-issues","title":"Commenting on Issues","text":"<p>To add a comment to an existing issue:</p> Bash<pre><code>add comment to issue 16: \"Implemented the first part of this feature\"\n</code></pre>"},{"location":"plugins/github/#workflow-example","title":"Workflow Example","text":"<p>Here's a typical workflow using the GitHub plugin:</p> <ol> <li> <p>Start a task by creating an issue:    Text Only<pre><code>create a github issue titled \"Implement documentation plugin\"\n</code></pre></p> </li> <li> <p>Begin work with context:    Text Only<pre><code>look at issue 25. Look at the code in file.py and ...\n</code></pre></p> </li> <li> <p>As you make progress, add comments:    Text Only<pre><code>add comment to issue 25: \"Created the initial plugin structure\"\n</code></pre></p> </li> <li> <p>Close the issue when complete:    Text Only<pre><code>close issue 25 with comment \"Feature completed and tested\"\n</code></pre></p> </li> </ol>"},{"location":"plugins/github/#integration-with-development-process","title":"Integration with Development Process","text":"<p>The GitHub plugin enables a structured development approach even for solo developers:</p> <ul> <li>Task Definition: Issues clearly define what needs to be done</li> <li>Work History: Comments provide a record of decisions and progress</li> <li>Knowledge Retention: Closed issues serve as documentation for how problems were solved</li> <li>Continuity: New VMPilot sessions can quickly pick up context from previous work</li> </ul>"},{"location":"plugins/overview/","title":"Plugins","text":"<p>VMPilot uses a unique text-based plugin system that extends LLM functionality without requiring traditional code-based implementations. This approach makes plugins easy to add, remove, and maintain.</p>"},{"location":"plugins/overview/#how-plugins-work","title":"How Plugins Work","text":"<p>Instead of using code-based integrations, VMPilot plugins work by injecting the plugin's directory README.md that lists the plugins into the main prompt. When the LLM needs to access a plugin, it reads the README.md for that plugin and knows what actions are available.</p> <p>For example, the <code>github_issues</code> plugin enables GitHub issue management through simple text commands. This plugin could be easily replaced with alternatives (like a Jira plugin) by swapping the plugin configuration.</p>"},{"location":"plugins/overview/#vmpilot-specific-implementation","title":"VMPilot-Specific Implementation","text":"<p>The plugin system design is based on VMPilot's own development stack: - GitHub: Issue tracking and workflow management - Python: Backend implementation language - Backend-focused: Designed for system operations tasks</p> <p>Other projects should adapt this plugin system to their specific tech stack and needs. The text-based approach makes it highly adaptable to different environments, languages, and toolchains.</p>"},{"location":"plugins/overview/#current-plugin-system","title":"Current Plugin System","text":"<p>The system currently looks like this: Markdown<pre><code># Available plugins\n\n# Codemap\ndirectory: codemap\nCreates documentation by scanning the code and generating a doc per source file.\n\n# Github\n\ndirectory: github\\_issues\n- To view or list issues, use \"cd $rootDir &amp;&amp; gh issue view $number\" or \"gh issue list\". Always include the \"gh\" command.\n- To create an issue view the README.md file for instructions.\n\n# Documentation\n\ndirectory: documentation\n- Provides guidance for creating clear, concise, and user-friendly documentation\n- Helps users work with the MkDocs documentation system used by VMPilot\n- Offers best practices for technical writing and content structure\n- Assists with formatting for readability and proper Markdown usage\n\n# Testing\n\ndirectory: testing\n- Provides guidance for the VMPilot testing ecosystem as part of the CI/CD workflow\n- Includes unit tests, end-to-end tests, and coverage analysis requirements\n- Testing is an integral part of development, not an optional activity\n\n# Project\n\ndirectory: project\n- Manages project-specific configuration through the .vmpilot directory structure\n- Creates and maintains project context files (like project.md) that persist across conversations\n- Provides a framework for project documentation and setup\n- Streamlines the onboarding experience for new projects\n- Automatically includes project.md in the system prompt for each conversation\n\n# Branch Manager\n\ndirectory: branch_manager\n- Automates the process of creating git branches for GitHub issues\n- Ensures consistent branch naming conventions across the project\n- Integrates with GitHub to fetch issue details and create appropriate branches\n- Streamlines the workflow when starting work on a new issue\n</code></pre></p>"},{"location":"plugins/overview/#managing-plugins","title":"Managing Plugins","text":"<p>Enabling or disabling plugins is straightforward - simply add or remove their entries from the main README.md file.</p>"},{"location":"plugins/overview/#creating-new-plugins","title":"Creating New Plugins","text":"<p>To create a new plugin: 1. Create a directory in the plugins directory 2. Create a README.md file using template.md from the plugins directory as a guide 3. Add your plugin's entry to the main README.md file in the plugins directory 4. Test the plugin functionality with various prompts</p> <p>For examples of existing plugins, see the <code>codemap</code> and <code>github_issues</code> implementations in the plugins directory.</p>"},{"location":"plugins/overview/#adapting-to-other-projects","title":"Adapting to Other Projects","text":"<p>When implementing this plugin system in your own projects:</p> <ol> <li>Use VMPilot: Ask VMPilot to look at the plugin system and adapt it to your project</li> <li>Evaluate your stack: Consider which tools and platforms your project relies on</li> <li>Identify integration points: Determine which aspects of your workflow would benefit from LLM assistance</li> <li>Design plugin interfaces: Create clear, concise instructions that tell the LLM how to interact with your tools</li> <li>Start simple: Begin with basic plugins and expand functionality as needed</li> </ol> <p>The flexibility of text-based plugins allows for easy experimentation and iteration without significant code changes.</p>"},{"location":"plugins/project/","title":"Project Plugin","text":"<p>The Project Plugin helps users set up and maintain project-specific configuration through the <code>.vmpilot</code> directory structure, providing contextual information about the project for each conversation.</p>"},{"location":"plugins/project/#purpose","title":"Purpose","text":"<p>This plugin enables VMPilot to:</p> <ul> <li>Create and manage project-specific configuration files</li> <li>Store project context that persists across conversations</li> <li>Provide a consistent framework for project documentation</li> <li>Streamline the onboarding experience for new projects</li> </ul>"},{"location":"plugins/project/#project-structure","title":"Project Structure","text":"<p>When set up, the project will have the following structure:</p> Text Only<pre><code>.vmpilot/\n\u2514\u2500\u2500 prompts/\n    \u2514\u2500\u2500 project.md\n</code></pre> <p>The <code>project.md</code> file contains essential information about the project that's included in the system prompt for each conversation, helping VMPilot understand the project context.</p>"},{"location":"plugins/project/#setup-process","title":"Setup Process","text":"<p>When a user starts a chat in a project without the <code>.vmpilot</code> directory structure, VMPilot will:</p> <ol> <li>Detect the missing project structure</li> <li>Present the user with options:</li> <li>Option A (Recommended): Create standard project files from a template</li> <li>Option B: Skip project setup and remember this preference</li> </ol>"},{"location":"plugins/project/#option-a-standard-setup","title":"Option A: Standard Setup","text":"<p>This option creates the <code>.vmpilot/prompts</code> directory and populates it with a template <code>project.md</code> file that users can customize to describe their project.</p> <p>The standard setup:</p> <ul> <li>Creates the necessary directory structure</li> <li>Adds a template project description file</li> <li>Maintains Git compatibility by respecting existing .gitignore settings</li> </ul>"},{"location":"plugins/project/#option-b-skip-setup","title":"Option B: Skip Setup","text":"<p>If users prefer not to create the <code>.vmpilot</code> directory structure, they can choose to skip setup. VMPilot will:</p> <ul> <li>Remember this preference for future sessions</li> <li>Not prompt again about creating project files</li> <li>Continue to function without project-specific context</li> </ul>"},{"location":"plugins/project/#customizing-project-description","title":"Customizing Project Description","text":"<p>After setup, users can either:</p> <ol> <li>Manual Editing: Edit the <code>project.md</code> file directly with their preferred text editor</li> <li>VMPilot-Assisted Analysis: Ask VMPilot to analyze the project and suggest a customized description</li> </ol> <p>The <code>project.md</code> file should include:</p> <ul> <li>Project name and description</li> <li>Directory structure overview</li> <li>Setup and installation instructions</li> <li>Development guidelines</li> <li>Testing and deployment processes</li> <li>Additional resources</li> </ul>"},{"location":"plugins/project/#benefits","title":"Benefits","text":"<p>Using the Project Plugin provides several advantages:</p> <ul> <li>Consistent Context: VMPilot understands your project better with each interaction</li> <li>Reduced Repetition: No need to explain project structure repeatedly</li> <li>Improved Recommendations: More accurate suggestions based on project-specific knowledge</li> <li>Documentation Framework: Built-in structure for maintaining project documentation</li> </ul>"},{"location":"plugins/project/#usage","title":"Usage","text":"<p>To get started with the Project Plugin:</p> <ol> <li>Begin a new chat in your project directory</li> <li>VMPilot will detect if the project structure exists</li> <li>If not, choose between standard setup or skipping</li> <li>After setup, customize your <code>project.md</code> file to better describe your project</li> </ol> <p>To update your project description at any time, simply edit the <code>.vmpilot/prompts/project.md</code> file.</p>"},{"location":"plugins/testing/","title":"Testing Plugin","text":""},{"location":"plugins/testing/#overview","title":"Overview","text":"<p>The Testing Plugin provides comprehensive guidance for the VMPilot testing ecosystem, including unit tests, end-to-end tests, and code coverage analysis. Testing is an integral part of the VMPilot development workflow and CI/CD pipeline, not just an optional activity.</p>"},{"location":"plugins/testing/#testing-types","title":"Testing Types","text":"<p>VMPilot employs multiple testing approaches:</p> <ol> <li>Unit Tests: Test individual components in isolation using pytest</li> <li>End-to-End Tests: Test complete workflows using shell scripts and LLM-based evaluation</li> <li>Coverage Analysis: Combines results from both test types to ensure comprehensive testing</li> </ol>"},{"location":"plugins/testing/#key-features","title":"Key Features","text":"<ul> <li>Comprehensive Testing Framework: Supports both unit and end-to-end testing approaches</li> <li>CI/CD Integration: Testing is integrated into the development workflow and enforced in the CI/CD pipeline</li> <li>Coverage Analysis: Built-in tools to measure and improve test coverage</li> <li>Best Practices: Recommendations for test isolation, coverage, readability, and maintenance</li> <li>Test Templates: Ready-to-use templates for both unit and end-to-end tests</li> </ul>"},{"location":"plugins/testing/#testing-as-part-of-development-workflow","title":"Testing as Part of Development Workflow","text":"<p>Testing is not an optional activity but a required part of the development process:</p> <ol> <li>Feature Development: Tests must be created alongside any new feature implementation</li> <li>Pre-Merge Validation: Coverage analysis must be run before merging code</li> <li>CI/CD Enforcement: The CI/CD pipeline validates test coverage thresholds</li> </ol>"},{"location":"plugins/testing/#unit-testing","title":"Unit Testing","text":"<p>Unit tests focus on testing individual components in isolation:</p> <ul> <li>Test files are named with <code>test_</code> prefix</li> <li>Test functions also use the <code>test_</code> prefix</li> <li>Related tests are grouped into classes with <code>Test</code> prefix</li> <li>Tests use pytest fixtures for setup and teardown</li> <li>External dependencies are mocked</li> </ul>"},{"location":"plugins/testing/#running-unit-tests","title":"Running Unit Tests","text":"Bash<pre><code># Run all unit tests\npython -m pytest ~/vmpilot/tests/unit/\n\n# Run specific test file/class/function\npython -m pytest ~/vmpilot/tests/unit/test_config.py\npython -m pytest ~/vmpilot/tests/unit/test_specific.py::TestClass\npython -m pytest ~/vmpilot/tests/unit/test_specific.py::TestClass::test_function\n</code></pre>"},{"location":"plugins/testing/#running-tests-with-coverage","title":"Running Tests with Coverage","text":"Bash<pre><code># Run all unit tests with coverage report\npython -m pytest --cov=src/vmpilot --cov-report=term-missing tests/unit/\n\n# Run coverage for a specific module\npython -m pytest --cov=src/vmpilot/tools/edit_tool.py --cov-report=term-missing tests/unit/\n</code></pre>"},{"location":"plugins/testing/#end-to-end-testing","title":"End-to-End Testing","text":"<p>End-to-end tests validate complete workflows from the user's perspective:</p> <ul> <li>Tests are implemented as shell scripts in the <code>tests/scripts/</code> directory</li> <li>Tests use the <code>TEST_DIR</code> environment variable for isolation</li> <li>Tests run CLI commands with temperature 0 for consistent results</li> <li>Tests validate outputs using both exact matching and LLM-based evaluation</li> </ul>"},{"location":"plugins/testing/#running-end-to-end-tests","title":"Running End-to-End Tests","text":"Bash<pre><code># Run all e2e tests\ncd ~/vmpilot/tests\n./e2e_tests.sh\n\n# Run specific e2e tests\n./e2e_tests.sh scripts/ls_files.sh scripts/modify_file.sh\n</code></pre>"},{"location":"plugins/testing/#coverage-analysis","title":"Coverage Analysis","text":"<p>The project targets a minimum of 70% code coverage. Coverage analysis helps identify untested code:</p> Bash<pre><code># Run full coverage analysis\ncd ~/vmpilot\n./tests/coverage.sh\n\n# Run with custom threshold (default is 70%)\n./tests/coverage.sh -f 80\n</code></pre>"},{"location":"plugins/testing/#unit-test-example","title":"Unit Test Example","text":"<p>Here's an example of a unit test for the CLI module:</p> Python<pre><code>@pytest.mark.asyncio\nclass TestMainFunction:\n    \"\"\"Tests for the main async function that runs the CLI.\"\"\"\n\n    @patch(\"vmpilot.cli.Pipeline\")\n    async def test_main_basic_execution(self, mock_pipeline_class):\n        \"\"\"Test basic execution of the main function.\"\"\"\n        # Setup mocks\n        mock_pipeline = MagicMock()\n        mock_pipeline_class.return_value = mock_pipeline\n\n        # Mock the pipe method to return a simple generator\n        mock_pipeline.pipe.return_value = [\n            {\"type\": \"text\", \"text\": \"Response text\"}\n        ]\n\n        # Call main with basic parameters\n        with patch(\"builtins.print\") as mock_print:\n            await main(\n                command=\"list files\",\n                temperature=0.7,\n                provider=\"openai\",\n                debug=False,\n                chat_id=None\n            )\n\n        # Verify pipeline was created and configured correctly\n        mock_pipeline_class.assert_called_once()\n        mock_pipeline.set_provider.assert_called_once_with(\"openai\")\n\n        # Verify output was printed correctly\n        mock_print.assert_called_with(\"Response text\", end=\"\\n\", flush=True)\n</code></pre>"},{"location":"plugins/testing/#end-to-end-test-example","title":"End-to-End Test Example","text":"<p>Here's an example of an end-to-end test script:</p> Bash<pre><code>#!/bin/bash\n# Test script for file listing functionality\n\n# Exit on any error\nset -e\n\n# Check if TEST_DIR is set\nif [ -z \"$TEST_DIR\" ]; then\n    echo \"ERROR: TEST_DIR environment variable not set\"\n    exit 1\nfi\n\ncd \"$TEST_DIR\"\n\n# Process arguments for provider\nPROVIDER=\"anthropic\"\nwhile getopts \"p:\" opt; do\n  case $opt in\n    p) PROVIDER=\"$OPTARG\" ;;\n  esac\ndone\n\n# Create test files\necho \"Hello world\" &gt; test1.txt\necho \"print('Hello')\" &gt; test2.py\n\n# Run the CLI command with temperature 0 for consistent results\necho \"Testing file listing...\"\nOUTPUT=$(~/vmpilot/bin/cli.sh -t 0 -p \"$PROVIDER\" \"List files in this directory\")\n\n# Validate the output\nif [[ \"$OUTPUT\" != *\"test1.txt\"* || \"$OUTPUT\" != *\"test2.py\"* ]]; then\n    echo \"ERROR: Output does not list the expected files\"\n    echo \"Output: $OUTPUT\"\n    exit 1\nfi\n\necho \"Test passed!\"\nexit 0\n</code></pre>"},{"location":"plugins/testing/#benefits-of-testing-integration","title":"Benefits of Testing Integration","text":"<ul> <li>Comprehensive Quality Assurance: Combines unit and end-to-end testing approaches</li> <li>CI/CD Integration: Tests are automatically run as part of the development pipeline</li> <li>Coverage Requirements: Enforces minimum test coverage thresholds</li> <li>Standardized Process: Ensures all features have adequate test coverage</li> <li>Continuous Improvement: Regular coverage analysis identifies testing gaps</li> </ul>"},{"location":"tools/google-search/","title":"Google Search Tool","text":"<p>The Google Search tool allows VMPilot to search the web using Google's Custom Search API, enabling access to up-to-date information from the internet.</p>"},{"location":"tools/google-search/#overview","title":"Overview","text":"<p>The Google Search tool integrates with Google's Custom Search API to provide VMPilot with the ability to search the web and retrieve relevant information. This is particularly useful for:</p> <ul> <li>Answering questions that require current information</li> <li>Researching topics not covered in the context or conversation history</li> <li>Finding up-to-date documentation, tutorials, or references</li> <li>Gathering information about recent events or developments</li> </ul>"},{"location":"tools/google-search/#setup-instructions","title":"Setup Instructions","text":""},{"location":"tools/google-search/#1-create-a-google-cloud-project","title":"1. Create a Google Cloud Project","text":"<ul> <li>Go to Google Cloud Console</li> <li>Create a new project or select an existing one</li> </ul>"},{"location":"tools/google-search/#2-enable-the-custom-search-api","title":"2. Enable the Custom Search API","text":"<ul> <li>Navigate to \"APIs &amp; Services &gt; Library\"</li> <li>Search for \"Custom Search API\" and enable it</li> <li>Direct link: https://console.cloud.google.com/apis/library/customsearch.googleapis.com</li> </ul>"},{"location":"tools/google-search/#3-create-api-key","title":"3. Create API Key","text":"<ul> <li>Go to \"APIs &amp; Services &gt; Credentials\"</li> <li>Click \"Create Credentials\" and select \"API key\"</li> <li>Copy your new API key</li> </ul>"},{"location":"tools/google-search/#4-create-a-custom-search-engine","title":"4. Create a Custom Search Engine","text":"<ul> <li>Go to Programmable Search Engine</li> <li>In \"What to search\", select \"Search the entire web\"</li> <li>Give your search engine a name</li> <li>Click \"Create\"</li> <li>On the next page, click \"Control Panel\"</li> <li>Copy your \"Search engine ID\" (also called CSE ID)</li> </ul>"},{"location":"tools/google-search/#5-configure-environment-variables","title":"5. Configure Environment Variables","text":"<p>Set the following environment variables:</p> Bash<pre><code># Add to your ~/.bashrc, ~/.zshrc, or ~/.config/vmpilot.env file\nexport GOOGLE_API_KEY=\"your_api_key_here\"\nexport GOOGLE_CSE_ID=\"your_search_engine_id_here\"\n</code></pre> <p>Then reload your shell or run: Bash<pre><code>source ~/.bashrc  # or source ~/.zshrc\n</code></pre></p>"},{"location":"tools/google-search/#configuration","title":"Configuration","text":"<p>VMPilot's Google Search tool is configured in the <code>config.ini</code> file. The configuration section looks like this:</p> INI<pre><code>[google_search]\nenabled = true\napi_key_env = GOOGLE_API_KEY\ncse_id_env = GOOGLE_CSE_ID\nmax_results = 10\n</code></pre>"},{"location":"tools/google-search/#configuration-options","title":"Configuration Options","text":"Option Description Default <code>enabled</code> Enables or disables the Google Search tool <code>false</code> <code>api_key_env</code> Environment variable name for the Google API key <code>GOOGLE_API_KEY</code> <code>cse_id_env</code> Environment variable name for the Custom Search Engine ID <code>GOOGLE_CSE_ID</code> <code>max_results</code> Maximum number of search results to return <code>10</code>"},{"location":"tools/google-search/#usage","title":"Usage","text":"<p>Once configured, the Google Search tool is available to VMPilot automatically. You can use it by asking questions that require current information from the web.</p>"},{"location":"tools/google-search/#example-prompts","title":"Example Prompts","text":"<ul> <li>\"Search for the latest news about Python programming\"</li> <li>\"Find information about recent technological advancements\"</li> <li>\"What are the current weather conditions in New York?\"</li> <li>\"Look up documentation for the pandas library\"</li> </ul>"},{"location":"tools/google-search/#tool-parameters","title":"Tool Parameters","text":"<p>When using the Google Search tool, you can specify the following parameters:</p> Parameter Description Default <code>query</code> The search query to execute (required) - <code>num_results</code> Number of results to return <code>10</code>"},{"location":"tools/google-search/#example-results","title":"Example Results","text":"<p>The Google Search tool returns results in a formatted list that includes: - The title of each search result - A snippet or description - The URL to the source</p> <p>Example output: Text Only<pre><code>1. **Python Programming Language**\n   Python is a high-level, general-purpose programming language. Its design philosophy emphasizes code readability with the use of significant indentation.\n   URL: https://www.python.org/\n\n2. **Learn Python - Free Interactive Python Tutorial**\n   Learn Python, a powerful programming language used for web development, data analysis, artificial intelligence, and more.\n   URL: https://www.learnpython.org/\n</code></pre></p>"},{"location":"tools/google-search/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter issues with the Google Search tool:</p> <ol> <li> <p>Tool Not Available: Ensure the tool is enabled in <code>config.ini</code> by setting <code>enabled = true</code> in the <code>[google_search]</code> section.</p> </li> <li> <p>Authentication Errors: Verify your API key and CSE ID are correct and properly set in the environment variables.</p> </li> <li> <p>Missing Environment Variables: Check that the environment variables specified in <code>api_key_env</code> and <code>cse_id_env</code> are properly set in your environment.</p> </li> <li> <p>API Usage Limits: Google's Custom Search API has usage limits. If you exceed these limits, you may receive errors. Check your Google Cloud Console for usage statistics.</p> </li> <li> <p>Connection Issues: Ensure your system has internet connectivity to access Google's API services.</p> </li> </ol>"},{"location":"tools/google-search/#related-resources","title":"Related Resources","text":"<ul> <li>Google Custom Search JSON API Documentation</li> <li>LangChain Google Search Integration</li> <li>Google Cloud API Usage &amp; Quotas</li> </ul>"}]}